{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pierre-Yves Ricau","text":"<p> Nice to meet you! My friends call me P-Y or Pierre. My pronouns are he / him. I work at Square within Block, in San Francisco, as an Android Distinguished Engineer.</p>"},{"location":"#life","title":"Life","text":"<p>I live in San Francisco, I enjoy being with my family, rollerblading, baking and reading sci-fi.</p>"},{"location":"#work","title":"Work","text":"<p>Since 2009 I\u2019ve mostly been doing Android adjacent things, at Square for the last decade. I have published a number of open source libraries (including LeakCanary), technical articles and presentations.</p>"},{"location":"#reach-out","title":"Reach out!","text":"<p>I usually read any DM that isn\u2019t recruiting or spam on Mastodon and Twitter. I never open LinkedIn. If you really want my attention, get someone I trust to connect us.</p> <p> </p> This is me!"},{"location":"articles/","title":"Articles","text":""},{"location":"articles/#2023","title":"2023","text":"<ul> <li>Statistically Rigorous Android Macrobenchmarks</li> <li>Callback leaks: cancel your Picasso requests!</li> </ul>"},{"location":"articles/#2022","title":"2022","text":"<ul> <li>Let\u2019s investigate a Gradle IntelliJ memory leak!</li> <li>Using an Activity from a Hilt ViewModel</li> <li>WhileSubscribed(5000)</li> <li>Of sharks and heaps of sticky marshmallows</li> <li>Tracing main thread messages</li> <li>Fixing simpleperf broken records</li> </ul>"},{"location":"articles/#2021","title":"2021","text":"<ul> <li>WorkManager multi-process for libraries</li> <li>Launch Response Time</li> <li>Leak investigation: Rx disposal race in SQLDelight</li> <li>Android Vitals - Tap Response Time \ud83d\udc49</li> <li>Tap Response Time: Jetpack Navigation \ud83d\uddfa</li> <li>Introducing Curtains</li> <li>Waldo, where\u2019s my UI?</li> </ul>"},{"location":"articles/#2020","title":"2020","text":"<ul> <li>Android Vitals - How adb measures App Startup \ud83d\udd0e</li> <li>Android Vitals - Profiling App Startup \ud83d\udd2c</li> <li>Leak detection: Android Studio vs LeakCanary \u2694\ufe0f</li> <li>The real size of Android objects \ud83d\udccf</li> <li>Android Vitals - Rising to the first drawn surface \ud83e\udd3d\u200d\u2642\ufe0f</li> <li>Android Vitals - Is this a cold start? \ud83e\udd8b</li> <li>Android Vitals - Why did my process start? \ud83c\udf04</li> <li>Android Vitals - When did my app start? \u23f1</li> <li>Android Vitals - First draw time \ud83d\udc69\u200d\ud83c\udfa8</li> <li>Android Vitals - What time is it?</li> <li>Android Vitals - Diving into cold start waters \ud83e\udd76</li> <li>Beware PackageManager leaks!</li> <li>Instrumenting Firebase Test Lab</li> </ul>"},{"location":"articles/#2019","title":"2019","text":"<ul> <li>Story of an Android Q Leak: attachment crazy town!</li> </ul>"},{"location":"articles/#2018","title":"2018","text":"<ul> <li>Building a photo booth for Droidcon NYC</li> <li>A silent meeting is worth a thousand words</li> <li>LeakCanary 1.6 \ud83d\udc24</li> <li>Lightning Talks: How to Create and Deliver a Successful Tech Talk</li> </ul>"},{"location":"articles/#2017","title":"2017","text":"<ul> <li>Keeping the Daggers Sharp \u2694\ufe0f</li> <li>Ok Google, Charge $2 for Coffee</li> </ul>"},{"location":"articles/#2016","title":"2016","text":"<ul> <li>No Cause for Concern\u200a\u2014\u200aRxJava and Retrofit Throwing a Tantrum</li> <li>Android leak pattern: subscriptions in views</li> <li>Introducing Square\u2019s Register API for Android</li> </ul>"},{"location":"articles/#2015","title":"2015","text":"<ul> <li>Welcome to the (Color) Matrix</li> <li>A small leak will sink a great ship</li> <li>Dude, Where\u2019s My char[]?</li> <li>LeakCanary: Detect all memory leaks!</li> </ul>"},{"location":"articles/#2014","title":"2014","text":"<ul> <li>Advocating Against Android Fragments</li> </ul>"},{"location":"articles/#2013","title":"2013","text":"<ul> <li>A journey on the Android Main Thread\u200a\u2014\u200aLifecycle bits</li> <li>A journey on the Android Main Thread\u200a\u2014\u200aPSVM</li> <li>Square Cash - you owe me money!</li> <li>Transparency with JPEGs done right</li> <li>Chathead Basics</li> <li>Android String Placeholders</li> </ul>"},{"location":"articles/#2012","title":"2012","text":"<ul> <li>Android Adapter Good Practices</li> <li>Happy Birthday AndroidAnnotations!</li> <li>Renaming the Android Manifest package</li> </ul>"},{"location":"articles/#2011","title":"2011","text":"<ul> <li>Paris Android Dev Lab</li> <li>Coup de balai : d\u00e9blayer les branches d\u2019un repo Git</li> <li>Sexy dialogs, huhu</li> <li>T\u2019as mis \u00e0 jour les specs ?</li> <li>Roooh, j\u2019ai encore oubli\u00e9 ma branche Git !</li> <li>Un peu de style dans la TextView</li> <li>Quand mamie craque du Wifi</li> <li>Les mains dans le cambUiBinder</li> <li>Coloration Syntaxique en GWT</li> <li>Les IDE, et la r\u00e8gle des 80 / 120</li> <li>when(piwa\u00ef.quit(excilys)).thenReturn(new Blog());</li> <li>GWT : Big Fat deRPC</li> </ul>"},{"location":"articles/#2010","title":"2010","text":"<ul> <li>CAS et Grails, sans sarCASmes !</li> </ul>"},{"location":"cv/","title":"CV","text":"<p>My Ideal Job</p> <ul> <li>Strong technical culture</li> <li>High impact</li> <li>Remote friendly</li> <li>Small teams</li> </ul>"},{"location":"cv/#experience","title":"Experience","text":""},{"location":"cv/#software-engineer-square","title":"Software Engineer - Square","text":"<p>  [ | February 2013 - Present]   [ | San Francisco]  </p> <p>I got in touch with Square after contributing to their open source libraries. I moved to the San Francisco office to work with the best Android engineers.</p> <p>I contributed to every release of Square Point of Sale for Android since March 2013.</p> <p>In June 2013 I led the Android software side of the new Square Reader.</p> <p>In August 2013 I led a HackWeek project: SQUA(RED), a special red edition of the Square reader to fight AIDS. Our great hardware team made that a real product.</p> <p>In March 2014, I started leading the engineering effort to bring Square POS to Android Tablets. I made sure to implement new features on mobile as well, as I believe the screen size frontier is much less clear today, and features should be ubiquitous.</p> <p>In August 2015 I wrapped up my work on the Android Tablets team, which had grown from 1 to 6 engineers. We were done catching up with the iPad and started focusing on building new features. Our work was the app foundation for the Square Register.</p> <p>From September 2015 to January 2016 I worked on a super cool secret project that I cannot mention here. Small team, high throughput, we built a great app really fast.</p> <p>In February 2016, I joined the new Developer Platform team as its Android lead. We released Register API 1.0 a few months later.</p> <p>In March 2016 I started organizing a monthly internal lightning talk series. One hour, 5 lightning talks across all of engineering. This has been running since, with an attendance of about 100-150 engineers.</p> <p>In August 2018 we released the Square Reader SDK. This was a high complexity and high risk project. We prototyped it during a hackweek in August 2016, built a pilot in just a quarter, and then iterated through private betas for another 1.5 year.</p> <p>In January 2019 we released the In-App Payments SDK. Our team built it really fast and really well, as a high functioning team with almost a hive mind, knocking out bugs and features left and right. This isn\u2019t just an SDK, it\u2019s a delightful experience. We carefully crafted every detail, from the shape of (Kotlin first) APIs, to the SDK UI (only XML vector drawables, advanced canvas drawing, responsive animations with ConstraintLayout), to the code of the sample app (examplary example code!), to the structure of the quick start guide.</p> <p>In March 2019 I joined the Developer Empowerment organization to take on a new challenge, focusing on the reliability on Square mobile apps and SDKs.</p>"},{"location":"cv/#lead-software-developer-siine","title":"Lead Software Developer - Siine","text":"<p>  [ | September 2011 - January 2013]   [ | Barcelona &amp; Paris]  </p> <p>After two years of contracting work, I decided it was time to have fun and work on more impactful projects. </p> <p>At Siine, we created a fun and easy to use Android Keyboard. Our goal was to improve context typing.</p> <p>I rebuilt the whole app on top of the AOSP keyboard so that we could focus our efforts on building new UX, cleaned up our build process, added feature toggles, CI, and automatic releases.</p> <p>During my time at Siine, I released the Siine Keyboard, RefereePro to empower soccer referees, and PhOCD, a one day hackaton experiment.</p>"},{"location":"cv/#software-engineer-bfinance","title":"Software Engineer - bfinance","text":"<p>  [ | November 2010 - September 2011]   [ | Paris]  </p> <p>After a year at JCDecaux, I wanted to do less driving. Excilys found a nice new contract for me: bfinance, a financial services firm.</p> <p>It was a challenging time to join the team, after all the software engineers had left. Two weeks in, I was the sole developer of two complex tender managing applications. The first one is used for cash management analysis, and the other for financing and banking relationship analysis.</p> <p>These applications had been developed with a full team over several years. In order to keep potential regressions under control, I introduced continuous integration, a clean release process, and frequent small releases.</p>"},{"location":"cv/#software-engineer-jcdecaux","title":"Software Engineer - JCDecaux","text":"<p>  [ | November 2009 - November 2010]   [ | Paris]  </p> <p>JCDecaux liked the Android prototype I had done for them and I came in for a 3 months contract to finish the app. The food was great, so I ended up staying a year and contributed to many other projects.</p> <p>I took over the REST endpoint that talked to the mobile apps, a Tomcat / MySql app that was consuming web services. It was a stepping stone for what later became JCDecaux Open Data API.</p> <p>I also wrote their first GWT app, a map with a live overview of the state of the Velib stations for supervision and support purposes. You can see it here.</p>"},{"location":"cv/#software-engineer-excilys-group","title":"Software Engineer - Excilys Group","text":"<p>  [ | August 2009 - September 2011]   [ | Paris]  </p> <p>After my engineering internship at Excilys, I got a full time offer.</p> <p>Over these two year as a contractor, I worked for two clients: JCDecaux and bfinance.</p> <p>I also managed Excilys technical blog, gave Android &amp; GWT trainings, and created a widely used Open Source library for Android: AndroidAnnotations.</p>"},{"location":"cv/#engineering-internship-excilys-group","title":"Engineering Internship - Excilys Group","text":"<p>  [ | February 2009 - July 2009]   [ | Paris]  </p> <p>After writing software for Excilys during college, I decided to get an internship.</p> <p>I worked with skilled software engineers and learned a lot about Java. </p> <p>I discovered Android, had fun with it, and soon enough I was creating a prototype app for JCDecaux Velib maintenance team.</p>"},{"location":"cv/#side-projects","title":"Side projects","text":""},{"location":"cv/#call-for-paper-committee-devoxx-us-2017","title":"Call For Paper committee - Devoxx US 2017","text":"<p>  [ | October 2016 - March 2017]   [ | San Francisco]  </p>"},{"location":"cv/#leakcanary","title":"LeakCanary","text":"<p>  [ | May 2015 - Present]   [ | San Francisco]  </p> <p>LeakCanary is an Open Source memory leak detection library for Android.</p>"},{"location":"cv/#call-for-paper-committee-devoxx-france-2013","title":"Call For Paper committee - Devoxx France 2013","text":"<p>  [ | October 2012 - April 2013]   [ | Paris]  </p> <p>The Devoxx team contacted me for my mobile and Android skills, and my interest in the Java community.</p> <p>I helped organizing Devoxx France 2013 (2000+ attendees) and selecting talks as part of the Call For Paper committee.</p>"},{"location":"cv/#androidannotations","title":"AndroidAnnotations","text":"<p>  [ | December 2010 - December 2012]   [ | Paris]  </p> <p>AndroidAnnotations is an Open Source framework that enables Android developers to focus on their business problem rather than the plumbing that connects components and systems.</p> <p>I presented it at FOSDEM 2012, PAUG, Devoxx France 2012, OWF 2012, Devoxx 2012, LyonJUG.</p> <p>I created and maintained this project on my free time. Excilys contracted with me to maintain it from September 2011 to December 2012.</p>"},{"location":"cv/#vuzzz","title":"VuzZz","text":"<p>  [ | February 2012]   [ | Paris]  </p> <p>VuzZz was created during the Android DevCamp Paris 2012, a 3 day hackaton with 10 competing teams. After 48 hours of intense non stop hacking, our team finished first. VuzZz downloads geolocated data from several Open Data sources and then gives a note to a given address based on 50 criteria grouped in 6 categories (culture, transport, etc). The perfect tool for finding your next apartment!</p>"},{"location":"cv/#voxeorg","title":"Voxe.org","text":"<p>  [ | September 2011 - September 2012]   [ | Paris]  </p> <p>Voxe.org is a neutral open platform to compare political programs. I joined this non-profit organization on my free time to create the Android app.</p>"},{"location":"cv/#2h4u","title":"2H4U","text":"<p>  [ | 2006]   [ | Paris]  </p> <ul> <li>Too Hard For You is an Arkanoid and Tetris mix.</li> <li>I wrote a C++/SDL implementation in 2006.</li> <li>I rewrote it as an HTML5 game in 2011.</li> </ul> <p></p>"},{"location":"cv/#ekc","title":"EKC","text":"<p>  [ | January 2003 - December 2004]   [ | Paris]  </p> <p>With a team of 20 passionate people, we created a 3D RTS game using DarkBASIC on our free time (I was in High school).</p> <p> </p>"},{"location":"cv/#education","title":"Education","text":"<p>Education is what remains after one has forgotten everything he learned in school.</p>"},{"location":"cv/#insa-rouen","title":"INSA Rouen","text":"<p>  [ | Master\u2019s degree, Computer Software Engineering]   [ | 2004 - 2009]   [ | Rouen, France]  </p> <p>The INSA Rouen is a French School of Engineering. I earned a Dipl\u00f4me d\u2019Ing\u00e9nieur en Architecture des Syst\u00e8mes d\u2019Information.</p> <p>ASI : Architecture des Syst\u00e8mes d\u2019Information</p> <p>During my last semester I led 9 students for 6 months on a software project for Excilys. We worked 20 hours a week to create a functional testing tool (built on top of FIT) that would enable functional test driven development.</p> <p>We used agile practices (Scrum / XP) and were certified ISO 9001-2000. That means walls covered with post-its, a lot of paperwork, and a little bit of coding.</p>"},{"location":"cv/#kungliga-tekniska-hogskolan","title":"Kungliga Tekniska H\u00f6gskolan","text":"<p>  [ | Information &amp; Communication Technology]   [ | 2008]   [ | Stockholm, Sweden]  </p> <p>My last Engineering semester of Engineering School was in Stockholm, Sweden, in the Royal Institute of Technology. I studied ICT - Information &amp; Communication Technology.</p> <p>I took classes on Network Security (amazing class), Software Design (UML mi amor) and Entrepreneurship (it\u2019s the team, not the idea).</p> <p>I also learnt how to make a really good Tortilla de patatas.</p>"},{"location":"cv/#lycee-albert-schweitzer","title":"Lyc\u00e9e Albert Schweitzer","text":"<p>  [ | Baccalaur\u00e9at scientifique mention Bien]   [ | 2001 - 2004]   [ | Le Raincy, France]  </p> <p>I was in a European class, which meant more English courses.</p> <p>On my free time, I learnt a lot about coding by contributing to a 3D RTS game. My last year practical work was on generic algorithms, I wrote a somewhat working implementation for the traveling salesman problem, in DarkBasic (a Basic with 2D commands).</p>"},{"location":"cv/#certifications","title":"Certifications","text":"<ul> <li>Functional Programming Principles in Scala<ul> <li>Coursera, November 2012</li> </ul> </li> <li>Sun Certified Programmer for the Java Platform, SE 6<ul> <li>91%, License CX-310-065, November 2009</li> </ul> </li> <li>TOEIC<ul> <li>940, 2008</li> </ul> </li> <li>First Certificate of Cambridge<ul> <li>Grade B with distinctions, 2004</li> </ul> </li> </ul>"},{"location":"open_source/","title":"Open Source","text":"<p>A few notable Open Source libraries I published.</p>"},{"location":"open_source/#2021","title":"2021","text":"<ul> <li>PAPA</li> <li>logcat</li> <li>Curtains</li> </ul>"},{"location":"open_source/#2020","title":"2020","text":"<ul> <li>Radiography</li> </ul>"},{"location":"open_source/#2015","title":"2015","text":"<ul> <li>LeakCanary</li> </ul>"},{"location":"open_source/#2010","title":"2010","text":"<ul> <li>AndroidAnnotations</li> </ul>"},{"location":"public_speaking/","title":"Public Speaking","text":""},{"location":"public_speaking/#podcasts","title":"Podcasts","text":"<ul> <li> CodingWithMitch Android Performance with P.Y.</li> <li> Android Leaks \u00c9pisode 59 \u2013 Rappelez le plombier, on a un poireau 2.0</li> <li> Les Cast Codeurs Podcast LCC 222 - Interview sur Android avec Pierre-Yves Ricau et Romain Guy</li> <li> Android Leaks \u00c9pisode 32 \u2013 Le poireau ac\u00e9r\u00e9</li> <li> Fragmented 088: Offensive programming with Piwai from Square</li> <li> Android Leaks \u00c9pisode 7 \u2013 On a un poireau, appelez le plombier !</li> <li> Fragmented Google IO 2016</li> <li> Android Developers Backstage Episode 32: Leak Canary</li> </ul>"},{"location":"public_speaking/#presentations","title":"Presentations","text":""},{"location":"public_speaking/#2023","title":"2023","text":"<ul> <li> Android Makers En qu\u00eate de perf: l\u2019art subtil du profiling Android (video pending)</li> </ul>"},{"location":"public_speaking/#2022","title":"2022","text":"<ul> <li> DPE Summit DevProdEng Showdown! Developer Experience at Scale</li> <li> Chicago Roboto PAPA: Performance of Android Production Applications</li> <li> Droidcon SF MILK: a user-centric mobile performance model</li> </ul>"},{"location":"public_speaking/#2021","title":"2021","text":"<ul> <li> DevProdEng Showdown S1E2: Android at Scale</li> </ul>"},{"location":"public_speaking/#2020","title":"2020","text":"<ul> <li> Ask the Expert Live leak investigations</li> <li> Android Makers Pull requests \ud83d\udc68\u200d\ud83d\udcbb, yoga \ud83e\uddd8\u200d\u2642\ufe0f&amp; avocado toasts \ud83e\udd51: 7 ans d\u2019engineering \u00e0 Square</li> <li> The Sandbox Investigating Leaks in the Firefox App with Emily Kager</li> </ul>"},{"location":"public_speaking/#2019","title":"2019","text":"<ul> <li> Bugsnag Engineering Leadership Forum 2019 Hacking Bugsnag for Fun and Profit</li> <li> Droidcon SF PokeLeaks: Gotta Catch \u2018Em All \ud83d\udc24\ud83d\udd0d (workshop)</li> <li> Droidcon NYC Shark: Diving into the guts of LeakCanary\u2019s Hprof parser </li> <li> Android Makers, Paris LeakCanary 2: Leaner, Better, Faster, Kotliner!</li> </ul>"},{"location":"public_speaking/#2018","title":"2018","text":"<ul> <li> Droidcon SF Human Centered API Design</li> <li> Droidcon NYC Human Centered API Design</li> <li> Square (internal), SF Usability &amp; API Design</li> <li> MCE, Warsaw There is no good tech lead</li> <li> Uber Meetup, SF Memory Leak Hunt</li> <li> Square (internal), SF How to Create and Deliver a Successful Tech Talk</li> </ul>"},{"location":"public_speaking/#2017","title":"2017","text":"<ul> <li> Droidcon SF Despaghettifying the hairball</li> <li> Droidcon SF Codelab: Make a Cash Flow-Positive Photo Booth!</li> <li> Droidcon NYC Tech Talks for Humans</li> <li> Gradle Summit 2017 AARAWR! Fantastic bits and where to dex them</li> <li> SF Android Meetup AARAWR! Fantastic bits and where to dex them</li> <li> Devoxx US, San Diego Nuking Nasty Memory Leaks</li> <li> Snap Inc., Los Angeles AARAWR! Fantastic bits and where to dex them</li> </ul>"},{"location":"public_speaking/#2016","title":"2016","text":"<ul> <li> DevFest Nantes LeakCanary, et ensuite ? D\u00e9tricotage de fuites m\u00e9moire Android</li> <li> DevFest Nantes Tech talks: Uploadez vos id\u00e9es vers d\u2019autres \u00eatres humains</li> <li> GOTO Copenhagen Nuking Nasty Memory Leaks</li> <li> General Assembly, SF Panel on sourcing Android devs</li> <li> @Scale, San Diego All apps shall crash. Deal with it.</li> <li> Devoxx France Sharper Better Faster Dagger \u2021</li> <li> Devoxx France Bouchez vos fuites m\u00e9moires avec LeakCanary!</li> <li> Mix-IT, Lyon Crash Fast &amp; Furious</li> <li> Realm Meetup, SF DIY: Build Your Own Dependency Injection Library</li> <li> Droidcon SF Sharper Better Faster Dagger \u2021</li> <li> Square Presents Moderator, panel discussion on the Journey of Android Engineers</li> </ul>"},{"location":"public_speaking/#2015","title":"2015","text":"<ul> <li> \u00d8redev, Malm\u00f6 Crash Fast &amp; Furious &amp; Detect all memory leaks with LeakCanary!</li> <li> Droidcon NYC Detect all memory leaks with LeakCanary!</li> <li> Box Mobile Open House, Los Altos Crash Fast: Square\u2019s Approach to Android Crashes</li> <li> Square Presents, SF Detect all memory leaks with LeakCanary!</li> <li> AppsWorld NA, SF Panel: Developing apps for the Android market</li> <li> Airbnb Meetup, SF Crash Fast: Square\u2019s approach to Android crashes</li> <li> Mobile Central Europe, Warsaw Mortar &amp; Flow</li> </ul>"},{"location":"public_speaking/#2014","title":"2014","text":"<ul> <li> Devoxx Belgium Crash Fast: Square\u2019s approach to Android crashes</li> <li> Droidcon Paris Interview (fr)</li> <li> Droidcon Paris Defragment your apps with Mortar (fr)</li> <li> Devoxx France Square: data collection to decision making (fr)</li> </ul>"},{"location":"public_speaking/#2013","title":"2013","text":"<ul> <li> Droidcon London Square OSS libs</li> <li> Paris Android UG Square OSS libs</li> <li> Droidcon Paris Keynote: Facebook vs Square</li> <li> Devoxx France Android Bad Practices</li> <li> LyonJUG Android Live Coding</li> </ul>"},{"location":"public_speaking/#2012","title":"2012","text":"<ul> <li> Devoxx Belgium AndroidAnnotations</li> <li> Open World Forum, Paris AndroidAnnotations</li> <li> DuchessFr, Paris Hands-on Android</li> <li> Devoxx France AndroidAnnotations</li> <li> Paris Android UG AndroidAnnotations</li> <li> ParisJUG Code Story Ultimate Randori Night</li> <li> FOSDEM, Brussels AndroidAnnotations</li> </ul>"},{"location":"blog/android-adapter-good-practices/","title":"Android adapter good practices","text":"<p>  [ | December 27, 2012]  </p> <p>In Android, the standard way to display a list of items is to use <code>ListView</code> together with a <code>ListAdapter</code>. The <code>ListView</code> draws the currently shown items, and the <code>ListAdapter</code> provides the <code>ListView</code> with the <code>View</code> corresponding to each item.</p> <p>The aim is to create only the necessary number of views to fill the screen, and reuse these views as soon as they disappear.</p> <p>This article will explain various <code>ListAdapter</code> patterns and good practices.</p>"},{"location":"blog/android-adapter-good-practices/#arrayadapter-sucks","title":"ArrayAdapter sucks","text":"<p>Let\u2019s say you want to display a list of <code>BananaPhone</code> that can be updated. </p> <p>Some Android tutorials advise using an <code>ArrayAdapter</code>, because it is supposedly easier. This couldn\u2019t be any less true.</p> <p><code>ArrayAdapter</code> has many limitations, which limits its use in real world apps.</p> <p>An <code>ArrayAdapter</code>:</p> <ul> <li>Can only display text.</li> <li>Forces you to provide a list of <code>CharSequence</code> items or to rely on the <code>toString()</code> method of the given items.</li> <li>Requires that you provide a layout resource that contains only a <code>TextView</code>, or that you provide a <code>textViewResourceId</code> that corresponds to the <code>TextView</code> id in the layout hierarchy.</li> <li>Uses a lock to enable updates from background threads. This lock cannot be acquired to implement external atomic operations.</li> </ul> <p>According to the Javadoc:</p> <p>Don\u2019t do this!</p> <p>To use something other than TextViews for the array display, for instance, ImageViews, or to have some of data besides toString() results fill the views, override getView(int,android.view.View,android.view.ViewGroup) to return the type of view you want.</p> <p>If you read the source, you\u2019ll realize that <code>ArrayAdapter</code> is designed to deal with a lot of use cases which you probably do not care about.</p>"},{"location":"blog/android-adapter-good-practices/#baseadapter-rocks","title":"BaseAdapter rocks","text":"<p>In most apps, it\u2019s actually a lot simpler to implement your own <code>BaseAdapter</code>:</p> <pre><code>public class BananaPhoneAdapter extends BaseAdapter {\nprivate List&lt;BananaPhone&gt; bananaPhones = Collections.emptyList();\nprivate final Context context;\n// the context is needed to inflate views in getView()\npublic BananaPhoneAdapter(Context context) {\nthis.context = context;\n}\npublic void updateBananas(List&lt;BananaPhone&gt; bananaPhones) {\nthis.bananaPhones = bananaPhones;\nnotifyDataSetChanged();\n}\n@Override\npublic int getCount() {\nreturn bananaPhones.size();\n}\n// getItem(int) in Adapter returns Object but we can override\n// it to BananaPhone thanks to Java return type covariance\n@Override\npublic BananaPhone getItem(int position) {\nreturn bananaPhones.get(position);\n}\n// getItemId() is often useless, I think this should be the default\n// implementation in BaseAdapter\n@Override\npublic long getItemId(int position) {\nreturn position;\n}\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\n// Let's look at that later\n}\n}\n</code></pre>"},{"location":"blog/android-adapter-good-practices/#thread-safety","title":"Thread safety","text":"<p>I mentioned that the <code>ArrayAdapter</code> uses a lock to ensure thread safety. That\u2019s fine, but there is an even better way: get rid of threading. Make sure your adapter is used only from one thread, the Main thread.</p> <p>You can easily enforce that with a fail fast strategy:</p> <pre><code>public void updateBananas(List&lt;BananaPhone&gt; bananaPhones) {\nThreadPreconditions.checkOnMainThread();\nthis.bananaPhones = bananaPhones;\nnotifyDataSetChanged();\n}\n</code></pre> <p>Here is an example implementation:</p> <pre><code>public class ThreadPreconditions {\npublic static void checkOnMainThread() {\nif (BuildConfig.DEBUG) {\nif (Thread.currentThread() != Looper.getMainLooper().getThread()) {\nthrow new IllegalStateException(\"This method should be called from the Main Thread\");\n}\n}\n}\n}\n</code></pre>"},{"location":"blog/android-adapter-good-practices/#getview-recycling","title":"getView() recycling","text":"<p>A naive implementation of <code>getView()</code> could be:</p> <pre><code>@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\nView rootView = LayoutInflater.from(context)\n.inflate(R.layout.banana_phone, parent, false);\nImageView bananaView = (ImageView) rootView.findViewById(R.id.banana);\nTextView phoneView = (TextView) rootView.findViewById(R.id.phone);\nBananaPhone bananaPhone = getItem(position);\nphoneView.setText(bananaPhone.getPhone());\nbananaView.setImageResource(bananaPhone.getBanana());\nreturn rootView;\n}\n</code></pre> <p>However, <code>ListView</code> recycles the views that are not shown any more, and gives them back through <code>convertView</code>. Let\u2019s take advantage of this:</p> <pre><code>@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\nif (convertView == null) {\nconvertView = LayoutInflater.from(context)\n.inflate(R.layout.banana_phone, parent, false);\n}\nImageView bananaView = (ImageView) convertView.findViewById(R.id.banana);\nTextView phoneView = (TextView) convertView.findViewById(R.id.phone);\nBananaPhone bananaPhone = getItem(position);\nphoneView.setText(bananaPhone.getPhone());\nbananaView.setImageResource(bananaPhone.getBanana());\nreturn convertView;\n}\n</code></pre>"},{"location":"blog/android-adapter-good-practices/#findviewbyid-mi-amor","title":"findViewById() mi amor","text":"<p>There is still one subtle problem with <code>getView()</code>: each time it is called, it retrieves <code>bananaView</code> and <code>phoneView</code> through <code>findViewById()</code>.</p> <p>How does <code>findViewById()</code> work exactly ? Here is a simplified version:</p> <pre><code>public View findViewById(int id) {\nif (this.id == id) {\nreturn this;\n}\nfor(View child : children) {\nView view = child.findViewById(id);\nif (view != null) {\nreturn view;\n}\n}\nreturn null;\n}\n</code></pre> <p>As you can see, <code>findViewById()</code> navigates through the whole view hierarchy until it finds the requested view, each time you call it.</p> <p>Whether or not this is a problem is up to you. If your <code>ListView</code> scrolls fine even on crap devices, don\u2019t bother optimizing. Otherwise, start traceview and measure how much time is spent in <code>findViewById()</code>.</p>"},{"location":"blog/android-adapter-good-practices/#viewholder-pattern","title":"ViewHolder Pattern","text":"<p>The ViewHolder Pattern is a well known pattern to limit the number of calls to <code>findViewById()</code>. The idea is that you call it once, then store the child view references in a <code>ViewHolder</code> instance that will be associated with the <code>convertView</code> thanks to <code>View.setTag()</code>.</p> <pre><code>private static class ViewHolder {\npublic final ImageView bananaView;\npublic final TextView phoneView;\npublic ViewHolder(ImageView bananaView, TextView phoneView) {\nthis.bananaView = bananaView;\nthis.phoneView = phoneView;\n}\n}\n@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\nImageView bananaView;\nTextView phoneView;\nif (convertView == null) {\nconvertView = LayoutInflater.from(context)\n.inflate(R.layout.banana_phone, parent, false);\nbananaView = (ImageView) convertView.findViewById(R.id.banana);\nphoneView = (TextView) convertView.findViewById(R.id.phone);\nconvertView.setTag(new ViewHolder(bananaView, phoneView));\n} else {\nViewHolder viewHolder = (ViewHolder) convertView.getTag();\nbananaView = viewHolder.bananaView;\nphoneView = viewHolder.phoneView;\n}\nBananaPhone bananaPhone = getItem(position);\nphoneView.setText(bananaPhone.getPhone());\nbananaView.setImageResource(bananaPhone.getBanana());\nreturn convertView;\n}\n</code></pre>"},{"location":"blog/android-adapter-good-practices/#tag-with-id","title":"Tag with id","text":"<p>Here is an alternative to the ViewHolder Pattern that you can start using with Android 4.0 (API level 15). Do not use it prior to ICS (more on this below).</p> <p>Since Android 1.6, there is an overloaded version of <code>View.setTag(int, Object)</code> that takes an <code>int</code> key. The <code>key =&gt; tag</code> association is stored in a SparseArray that belongs to the view. A key lookup is basically a binary search in an array containing the sorted keys.</p> <p>By the way, the <code>SparseArray</code> javadoc says that it is intended to be more efficient than using a HashMap to map Integers to Objects. The intent is nice, but that is quite a vague assertion. Is it more efficient in terms of space? runtime? Less GC? Under which conditions? Why does it need key ordering? E.g it could have been a hashtable implementation with int keys.</p> <p>Notice how we reuse the view ids as tag keys: <pre><code>@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\nImageView bananaView;\nTextView phoneView;\nif (convertView == null) {\nconvertView = LayoutInflater.from(context)\n.inflate(R.layout.banana_phone, parent, false);\nbananaView = (ImageView) convertView.findViewById(R.id.banana);\nphoneView = (TextView) convertView.findViewById(R.id.phone);\nconvertView.setTag(R.id.banana, bananaView);\nconvertView.setTag(R.id.phone, phoneView);\n} else {\nbananaView = (ImageView) convertView.getTag(R.id.banana);\nphoneView = (TextView) convertView.getTag(R.id.phone);\n}\nBananaPhone bananaPhone = getItem(position);\nphoneView.setText(bananaPhone.getPhone());\nbananaView.setImageResource(bananaPhone.getBanana());\nreturn convertView;\n}\n</code></pre></p> <p>As mentioned before, although the API is available since Android 1.6, you shouldn\u2019t use it prior to Android 4.0, because the implementation wasn\u2019t a per-view <code>SparseArray</code>.</p> <p><code>View.setTag(int, Object)</code> clearly wasn\u2019t designed with the ViewHolder Pattern in mind. The <code>key =&gt; tag</code> association was stored in a static <code>WeakHashMap</code> using the <code>View</code> object as the key. A <code>WeakHashMap</code> stores weak references to its keys. The idea was that as soon as a view wasn\u2019t referenced anywhere else then in the <code>WeakHashMap</code>, the entry could be garbage collected. However, if the value of a <code>WeakHashMap</code> entry contains a hard reference to its key (the view), it will never be garbage collected, and you\u2019ll get a memory leak. More on this here, also see the issue.</p>"},{"location":"blog/android-adapter-good-practices/#custom-item-viewgroup","title":"Custom item ViewGroup","text":"<p>There is a third way that provides better decoupling. The idea is to create a custom ViewGroup, e.g. <code>BananaPhoneView</code>, for each item. <code>BananaPhoneView</code> will keep the references to it child views. <code>BananaPhoneView</code> is now responsible for updating <code>bananaView</code> and <code>phoneView</code>.</p> <pre><code>@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\nBananaPhoneView bananaPhoneView;\nif (convertView == null) {\nbananaPhoneView = (BananaPhoneView) LayoutInflater.from(context)\n.inflate(R.layout.banana_phone, parent, false);\n} else {\nbananaPhoneView = (BananaPhoneView) convertView;\n}\nBananaPhone bananaPhone = getItem(position);\nbananaPhoneView.update(bananaPhone);\nreturn bananaPhoneView;\n}\n</code></pre>"},{"location":"blog/android-adapter-good-practices/#custom-item-view","title":"Custom item view","text":"<p>Your performance measurements may tell you that you spend too much time going through the view hierarchy when measuring and drawing. You can flatten your view hierarchy by combining components, or by creating a custom view that draws the whole item manually. That\u2019s how the mail list in Gmail works.</p> <p></p> <p>If you haven\u2019t already, take at look at Android Performance Case Study.</p>"},{"location":"blog/android-adapter-good-practices/#conclusion","title":"Conclusion","text":"<p>Adapters in Android are frightening at first, but when you get to know them, they are actually quite friendly beasts. The best way to get there is to read the Android source, as well as other apps source, such as GitHub Android, White House for Android, or ioshed.</p> <p>Many thanks to Frank Harper, Eric Bottard and Joan Zapata for reviewing this article.</p>"},{"location":"blog/android-adapter-good-practices/#update","title":"Update","text":"<p>Beno\u00eet Lubek suggested another solution on Google+.</p> <p>The idea is to reproduce the <code>View.setTag(int, Object)</code> ICS+ behavior as an external API, relying on <code>View.setTag(Object)</code>:</p> <pre><code>public class ViewHolder {\n// I added a generic return type to reduce the casting noise in client code\n@SuppressWarnings(\"unchecked\")\npublic static &lt;T extends View&gt; T get(View view, int id) {\nSparseArray&lt;View&gt; viewHolder = (SparseArray&lt;View&gt;) view.getTag();\nif (viewHolder == null) {\nviewHolder = new SparseArray&lt;View&gt;();\nview.setTag(viewHolder);\n}\nView childView = viewHolder.get(id);\nif (childView == null) {\nchildView = view.findViewById(id);\nviewHolder.put(id, childView);\n}\nreturn (T) childView;\n}\n}\n</code></pre> <p>This solution is elegant, and the code looks even simpler:</p> <pre><code>@Override\npublic View getView(int position, View convertView, ViewGroup parent) {\nif (convertView == null) {\nconvertView = LayoutInflater.from(context)\n.inflate(R.layout.banana_phone, parent, false);\n}\nImageView bananaView = ViewHolder.get(convertView, R.id.banana);\nTextView phoneView = ViewHolder.get(convertView, R.id.phone);\nBananaPhone bananaPhone = getItem(position);\nphoneView.setText(bananaPhone.getPhone());\nbananaView.setImageResource(bananaPhone.getBanana());\nreturn convertView;\n}\n</code></pre> <p>I really like this approach!</p>"},{"location":"blog/android-adapter-good-practices/#comments","title":"Comments","text":""},{"location":"blog/android-adapter-good-practices/#hub","title":"hub","text":"<p>You explain a difficult thing in a simple way. Thank you very much.</p>"},{"location":"blog/android-adapter-good-practices/#james","title":"James","text":"<p>Clear illustration of the choice of different adapters, very practical and very useful! Thanks!</p>"},{"location":"blog/android-adapter-good-practices/#xiao","title":"Xiao","text":"<p>I was looking for a way to replace the entire list of items inside an ArrayAdapter without calling clear()/addAll() which generates garbage. This looks like a good solution (referring to the updateBananas() function).</p>"},{"location":"blog/android-adapter-good-practices/#imherolddev","title":"imherolddev","text":"<p>I have done a lot of research, written different adapters, duct taped and glued some together, and now that I come back to revisit ListView, I find your post! I hope to see a comparison between RecylerView and the ViewHolders you have described here. However, the BaseAdapter example has me excited to write my next Adapter, which should be far more complex than what I have done to date\u2026 Thank you for your write up here! I will be sure to share with my circles.</p>"},{"location":"blog/android-adapter-good-practices/#robertoallende","title":"robertoallende","text":"<p>Great article, you\u2019ve saved my day. Thank you very much!</p>"},{"location":"blog/android-adapter-good-practices/#mario-valney","title":"M\u00e1rio Valney","text":"<p>I really loved your article. Great explanation! I confess I started with another approach, but when I read your article I just changed everything because it\u2019s much more elegant!</p>"},{"location":"blog/android-string-placeholders/","title":"Android string placeholders","text":"<p>  [ | January 10, 2013]  </p> <p>This article reviews different ways to create dynamic translatable strings in Android.</p>"},{"location":"blog/android-string-placeholders/#quick-reminder","title":"Quick reminder","text":"<p>In Android, message strings are extracted to XML files, and the system loads the resources corresponding to the current configuration.</p> <p>res/values/strings.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;string name=\"sexy_button_title\"&gt;Click me, I'm famous!&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre></p> <p>res/values-fr/strings.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;string name=\"sexy_button_title\"&gt;Cliquez-moi, parce que je le vaux bien !&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre></p> <pre><code>Resources resources = context.getResources();\nString sexyButtonTitle = resources.getString(R.string.sexy_button_title);\n</code></pre>"},{"location":"blog/android-string-placeholders/#formatting-strings","title":"Formatting strings","text":"<p>Let\u2019s say we want to display a dynamic string, such as Player Foo - Score: 42.</p> <p>We may be tempted to implement that quickly with <code>String.format()</code>.</p> <p>Wrong <pre><code>&lt;string name=\"score_format\"&gt;Player %s - Score: %d&lt;/string&gt;\n</code></pre></p> <pre><code>Resources resources = context.getResources();\nString scoreString = String.format(resources.getString(R.string.score_format), player, score);\n</code></pre> <p>You will get a compile time error message on the <code>&lt;string /&gt;</code> definition.</p> <p>Error</p> <p>Multiple substitutions specified in non-positional format; did you mean to add the formatted=\u201dfalse\u201d attribute?</p> <p>This error message is misleading, because one may believe that using <code>formatted=\"false\"</code> is the way to go.</p> <p>Still Wrong <pre><code>&lt;string name=\"score_format\" formatted=\"false\"&gt;Player %s - Score: %d&lt;/string&gt;\n</code></pre></p> <p>Although the error message now disappears, the real solution is to use a positional format.</p> <p>Right <pre><code>&lt;string name=\"score_format\"&gt;Player %1$s - Score: %2$d&lt;/string&gt;\n</code></pre></p> <p>When translating strings, the word order will change. For instance, Name: John Smith in English becomes Nom : Smith John in French.</p> <pre><code>Resources resources = context.getResources();\nString scoreString = String.format(resources.getString(R.string.name), firstname, lastname);\n</code></pre> <p>res/values/strings.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;string name=\"name\"&gt;Name: %1$s %2$s&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre></p> <p>res/values-fr/strings.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;string name=\"name\"&gt;Nom : %2$s %1$s&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre></p> <p>Using positional format prevents translation mistakes.</p>"},{"location":"blog/android-string-placeholders/#getstring","title":"getString()","text":"<p>Did you know that instead of <code>String.format()</code>, you can use an overloaded version of <code>getString()</code> that handles formatting?</p> <pre><code>Resources resources = context.getResources();\nString scoreString = resources.getString(R.string.score_format, player, score);\n</code></pre> <p>Is that stricly equivalent to the previous code? Let\u2019s look at the Android source!</p> <pre><code>public class Resources {\n// \u2026\npublic String getString(int id, Object... formatArgs) throws NotFoundException {\nString raw = getString(id);\nreturn String.format(mConfiguration.locale, raw, formatArgs);\n}\n}\n</code></pre> <p>Almost the same, except that we are using the resource configuration locale, whereas we were previously using the default locale.</p> <pre><code>public final class String implements Serializable, Comparable&lt;String&gt;, CharSequence {\n// \u2026\npublic static String format(String format, Object... args) {\nreturn format(Locale.getDefault(), format, args);\n}\n}\n</code></pre> <p><code>Locale.getDefault()</code> is usually equal to <code>mConfiguration.locale</code>, so this won\u2019t really be a problem until you start messing with the default locale.</p> <p>By the way, you probably know that <code>getString()</code> is also available on <code>Context</code>.</p> <pre><code>String scoreString = context.getString(R.string.score_format, player, score);\n</code></pre> <p>What\u2019s the difference? None. It just delegates to <code>Resources</code>.</p> <pre><code>public abstract class Context {\n// \u2026\npublic final String getString(int resId, Object... formatArgs) {\nreturn getResources().getString(resId, formatArgs);\n}\n}\n</code></pre> <p>If someone knows the story behind this weird shortcut method, let me know. For now, I\u2019ll just assume this is a consequence of Drunk Driven Development.</p>"},{"location":"blog/android-string-placeholders/#professional-translation","title":"Professional Translation","text":"<p>Your users deserve better than Google translate. XML resource files should be translated by a professional translator.</p> <p>This translator will know nothing about your app internals. Therefore, it may be really hard to find out what those <code>%1$s</code> cryptic signs mean.</p> <pre><code>&lt;string name=\"score_format\"&gt;Player %1$s - Score: %2$d&lt;/string&gt;\n</code></pre> <p>You can use comments to help the translator.</p> <pre><code>&lt;!-- %1$s is the player nickname and %2$d is the player score --&gt;\n&lt;string name=\"score_format\"&gt;Player %1$s - Score: %2$d&lt;/string&gt;\n</code></pre> <p>By the way, if you need excellent quality software translation, I know someone that\u2019s been translating software for more than 25 years. Yes, he is my father :) .</p>"},{"location":"blog/android-string-placeholders/#using-placeholders","title":"Using placeholders","text":"<p>Another interesting approach is to use named placeholders instead of format specifiers.</p> <p>I won\u2019t discuss which syntax is better for this kind of problem, let\u2019s just pick a simple one: <code>{placeholder}</code>.</p> <pre><code>&lt;string name=\"score_format\"&gt;Player {nickname} - Score: {score}&lt;/string&gt;\n</code></pre> <p>I find this much more readable! Now, you\u2019ll need an API to transform that format to the final string. </p> <pre><code>TagFormat scoreFormat = TagFormat.from(getString(R.string.score_format));\nscoreFormat.with(\"nickname\", player);\nscoreFormat.with(\"score\", score);\nString scoreString = scoreFormat.format();\n</code></pre> <p>Implementing this API is fairly straightforward.</p> <pre><code>public class TagFormat {\npublic static TagFormat from(String format) {\nreturn new TagFormat(format);\n}\nprivate final String format;\nprivate final Map&lt;String, Object&gt; tags = new LinkedHashMap&lt;String, Object&gt;();\nprivate TagFormat(String format) {\nthis.format = format;\n}\npublic TagFormat with(String key, Object value) {\ntags.put(\"\\\\{\" + key + \"\\\\}\", value);\nreturn this;\n}\npublic String format() {\nString formatted = format;\nfor (Entry&lt;String, Object&gt; tag : tags.entrySet()) {\n// bottleneck, creating temporary String objects!\nformatted = formatted.replaceAll(tag.getKey(), tag.getValue().toString());\n}\nreturn formatted;\n}\n}\n</code></pre> <p>This is just an example implementation, I\u2019ll leave a better one to you as an exercice. An interesting point here is that <code>with()</code> returns <code>this</code>, so you can use it as a fluid API.</p> <pre><code>String scoreString = TagFormat.from(getString(R.string.score_format))\n.with(\"nickname\", player)\n.with(\"score\", score)\n.format();\n</code></pre>"},{"location":"blog/android-string-placeholders/#conclusion","title":"Conclusion","text":"<p>I shamelessly stole this <code>{placeholder}</code> idea from Eric Burke, and thought it was worth sharing. </p> <p>Of course, you may already use Java libraries that can do this. If you are aware of a good one that does a decent job, let me know!</p>"},{"location":"blog/android-string-placeholders/#comments","title":"Comments","text":""},{"location":"blog/blog-meets-monster-octocat/","title":"Blog meets monster octocat","text":"<p>  [ | December 19, 2012]  </p> <p>I initially created this blog on Wordpress.com, mostly because I didn\u2019t want to invest any time in maintaining it.</p> <p>I\u2019ve been using GitHub and Markdown on an everyday basis ever since. I got bored of Wordpress, therefore I decided to migrate this blog to Jekyll, using the built-in GitHub support.</p> <p></p> <p>This means I can write my articles in Markdown with Mou, and just commit and push to publish an article.</p> <p>Even better, anyone can now improve this article with a pull request. I really like this!</p> <p>Jekyll generates static html pages. What about comments? Most Jekyll hosted blogs use external javascript services to dynamically include comments at the end of their blog posts. This doesn\u2019t feel right to me, because I think comments ought to be part of the content they are linked to.</p> <p>That\u2019s why comments are now part of the source of the post. All you need to do is click here, edit the post on GitHub and add your comments at the end.</p> <pre><code>### [Piwa\u00ef](http://piwai.info)\nHello!\n</code></pre> <p>Let\u2019s see if that\u2019s something you are able to do ;-) .</p> <p>By the way, I also started writing in English, trying to reach a broader audience and practice my writing. Let me know if you find weird french looking sentences.</p>"},{"location":"blog/blog-meets-monster-octocat/#comments","title":"Comments","text":""},{"location":"blog/blog-meets-monster-octocat/#gnupat","title":"gnupat","text":"<p>Great idea, I can\u2019t wait to see how the PR driven comments are going :D .</p> <p>By the way, am I doing this right?</p>"},{"location":"blog/blog-meets-monster-octocat/#aurelien","title":"Aur\u00e9lien","text":"<p>It\u2019s turtles all the way down ! And the comment button is displayed twice at the end of your post.</p>"},{"location":"blog/blog-meets-monster-octocat/#piwai","title":"Piwa\u00ef","text":"<p>Turns out, all comments pull request are located at the same position so this leads to merge conflicts (easy to fix though). Comments is displayed twice on purpose, as you can see now that there are actual comments. Maybe I should remove the first one.</p>"},{"location":"blog/chatheads-basics/","title":"Chatheads basics","text":"<p>  [ | April 14, 2013]  </p> <p>Facebook recently released a new feature in Facebook Messenger: Chatheads.</p> <p></p> <p>I was surprised that chatheads could be drawn on top of any app. Here is a quick explanation of how it works.</p>"},{"location":"blog/chatheads-basics/#no-activity","title":"No Activity?","text":"<p>At first you may think it\u2019s a trick with a transparent activity. Let\u2019s see:</p> <pre><code>$ adb shell dumpsys activity\nRunning activities (most recent first):\n  TaskRecord{42b03c38 #2 A com.android.launcher U 0}\nRun #0: ActivityRecord{42adf3f8 u0 com.android.launcher/com.android.launcher2.Launcher}\n</code></pre> <p>No activity! And that\u2019s because Messenger uses a service:</p> <pre><code>$ adb shell dumpsys activity services\nACTIVITY MANAGER SERVICES (dumpsys activity services)\n* ServiceRecord{43242ae0 u0 com.facebook.orca/.chatheads.ChatHeadService}\nintent={act=com.facebook.orca.chatheads.ACTION_HIDE_CHATHEADS cmp=com.facebook.orca/.chatheads.ChatHeadService}\npackageName=com.facebook.orca\n  processName=com.facebook.orca\n  baseDir=/data/app/com.facebook.orca-1.apk\n  dataDir=/data/data/com.facebook.orca\n  app=ProcessRecord{42a11228 32622:com.facebook.orca/u0a10126}\ncreateTime=-9m19s542ms lastActivity=-3m20s499ms\n  executingStart=-3m20s499ms restartTime=-9m19s542ms\n  startRequested=true stopIfKilled=false callStart=true lastStartId=65\n</code></pre>"},{"location":"blog/chatheads-basics/#principle","title":"Principle","text":"<p>It\u2019s simple: just add a view to a Window.</p> <p>As you probably know, an Activity has a Window instance. Dialogs also have their own dedicated Window. Even Services can have Window: InputMethodService uses a Window to receive touch events and draw a keyboard on top of another Window, and DreamService is used to create screensavers.</p>"},{"location":"blog/chatheads-basics/#permission","title":"Permission","text":"<p>To open a new window in which you will draw the chathead, you need the SYSTEM_ALERT_WINDOW permission.</p> <p>Allows an application to open windows using the type TYPE_SYSTEM_ALERT, shown on top of all other applications. Very few applications should use this permission; these windows are intended for system-level interaction with the user.</p> <pre><code>&lt;uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/&gt;\n</code></pre> <p>This is what your users will see when installing the app:</p> <p></p>"},{"location":"blog/chatheads-basics/#android-head","title":"Android Head","text":"<p>Now that you have the right permission, you just need to call WindowManager#addView() with the view and the corresponding layout params:</p> <pre><code>public class ChatHeadService extends Service {\nprivate WindowManager windowManager;\nprivate ImageView chatHead;\n@Override public IBinder onBind(Intent intent) {\n// Not used\nreturn null;\n}\n@Override public void onCreate() {\nsuper.onCreate();\nwindowManager = (WindowManager) getSystemService(WINDOW_SERVICE);\nchatHead = new ImageView(this);\nchatHead.setImageResource(R.drawable.android_head);\nWindowManager.LayoutParams params = new WindowManager.LayoutParams(\nWindowManager.LayoutParams.WRAP_CONTENT,\nWindowManager.LayoutParams.WRAP_CONTENT,\nWindowManager.LayoutParams.TYPE_PHONE,\nWindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,\nPixelFormat.TRANSLUCENT);\nparams.gravity = Gravity.TOP | Gravity.LEFT;\nparams.x = 0;\nparams.y = 100;\nwindowManager.addView(chatHead, params);\n}\n@Override\npublic void onDestroy() {\nsuper.onDestroy();\nif (chatHead != null) windowManager.removeView(chatHead);\n}\n}\n</code></pre> <p>Don\u2019t forget to start the service somehow:</p> <pre><code>startService(new Intent(context, ChatHeadService.class));\n</code></pre> <p></p>"},{"location":"blog/chatheads-basics/#drag-the-head","title":"Drag the head","text":"<p>You can now interact with the view. For example, here is a quick hack to drag the Android head around:</p> <pre><code>chatHead.setOnTouchListener(new View.OnTouchListener() {\nprivate int initialX;\nprivate int initialY;\nprivate float initialTouchX;\nprivate float initialTouchY;\n@Override public boolean onTouch(View v, MotionEvent event) {\nswitch (event.getAction()) {\ncase MotionEvent.ACTION_DOWN:\ninitialX = params.x;\ninitialY = params.y;\ninitialTouchX = event.getRawX();\ninitialTouchY = event.getRawY();\nreturn true;\ncase MotionEvent.ACTION_UP:\nreturn true;\ncase MotionEvent.ACTION_MOVE:\nparams.x = initialX + (int) (event.getRawX() - initialTouchX);\nparams.y = initialY + (int) (event.getRawY() - initialTouchY);\nwindowManager.updateViewLayout(chatHead, params);\nreturn true;\n}\nreturn false;\n}\n});\n</code></pre>"},{"location":"blog/chatheads-basics/#conclusion","title":"Conclusion","text":"<p>Prior to Facebook Chatheads, this trick was already used by some apps. A few examples:</p> <ul> <li>Display a side app launcher</li> <li>Take screenshots </li> <li>Draw notes over apps</li> <li>Reduce the screen brightness</li> </ul> <p>This feature is nice, but remember that with great power comes great responsibility.</p> <p>Please take care of your user pixels.</p>"},{"location":"blog/chatheads-basics/#comments","title":"Comments","text":""},{"location":"blog/chatheads-basics/#hidden-markov","title":"hidden-markov","text":"<p>Does this imply that Facebook Chatheads (or any application with SYSTEM_ALERT_WINDOW permission) is able to conduct keylogging and take screenshots at arbitrary time?</p>"},{"location":"blog/chatheads-basics/#kvgr","title":"kvgr","text":"<p>Great tutorial! Is there a way to display image only in launcher? When some activity is started, the icon should disapear. I thing there may be two ways: 1. parameter for WindowManager 2. detecting running app But I wasnt lucky to find the solution\u2026</p>"},{"location":"blog/chatheads-basics/#pickledolives","title":"pickledolives","text":"<p>Your tutorial is missing the point, that you need to register your service in the Android manifest file under the application tab.</p>"},{"location":"blog/coloration-syntaxique-en-gwt/","title":"Coloration syntaxique en gwt","text":"<p>  [ | September 5, 2011]  </p> <p>Vous connaissez peut-\u00eatre Rockslide, qui permet de r\u00e9aliser une pr\u00e9sentation (des slides) en GWT.</p> <p>Qui dit slides techniques dit exemples de code, et donc coloration syntaxique.</p> <p>J\u2019ai creus\u00e9 un peu le sujet pour finalement retenir une solution.</p> <p>Comment faire de la coloration syntaxique c\u00f4t\u00e9 client, en GWT ?</p>"},{"location":"blog/coloration-syntaxique-en-gwt/#solutions-disponibles","title":"Solutions disponibles","text":"<p>A ma connaissance, il n\u2019existe pas de solution de coloration syntaxique sp\u00e9cifique \u00e0 GWT, ce qui nous laisse trois options :</p> <ul> <li> <p>Impl\u00e9menter une solution en GWT (c\u2019est mort, je n\u2019ai pas que \u00e7a \u00e0 faire)</p> </li> <li> <p>Trouver une solution en Java et adapter la partie graphique (fausse bonne id\u00e9e)</p> </li> <li> <p>Trouver une solution en Javascript et r\u00e9aliser un binding GWT (\u00e7a, c\u2019est dans mes cordes)</p> </li> </ul> <p>Un rapide tour d\u2019horizon fait ressortir deux frameworks Javascript tr\u00e8s utilis\u00e9s pour la coloration syntaxique :</p> <ul> <li> <p>highlight.js</p> </li> <li> <p>SyntaxHighlighter</p> </li> </ul> <p>Les deux semblent maintenus, des releases r\u00e9centes sont disponibles. Mon choix se porte sur SyntaxHighlighter, qui semble plus beau. C\u2019est purement subjectif, mais je trouve que le code mis en couleur par highlight.js a un petit air vieillot.</p>"},{"location":"blog/coloration-syntaxique-en-gwt/#gwt-syntaxhighlighter","title":"gwt-syntaxhighlighter","text":"<p>Coup de bol : je tombe sur gwt-syntaxhighlighter, une int\u00e9gration assez pouss\u00e9e de SyntaxHighlighter dans GWT.</p> <p>Trop pouss\u00e9e, h\u00e9las :</p> <ul> <li> <p>gwt-syntaxhighlighter utilise des Generators, ce qui allonge le temps de compilation,</p> </li> <li> <p>gwt-syntaxhighlighter comporte quelques bugs qui ne sont pas corrig\u00e9s et qui sont difficiles \u00e0 contourner,</p> </li> <li> <p>la version de SyntaxHighlighter utilis\u00e9e n\u2019est pas \u00e0 jour (les versions r\u00e9centes apportent pourtant des \u00e9volutions int\u00e9ressantes).</p> </li> </ul> <p>De plus, il s\u2019av\u00e8re que l\u2019int\u00e9gration de SyntaxHighlighter est relativement ais\u00e9e, beaucoup plus simple que ce que tente de faire gwt-syntaxhighlighter.</p>"},{"location":"blog/coloration-syntaxique-en-gwt/#integration-gwt-de-syntaxhighlighter","title":"Int\u00e9gration GWT de SyntaxHighlighter","text":""},{"location":"blog/coloration-syntaxique-en-gwt/#charger-les-scripts-et-les-css","title":"Charger les scripts et les CSS","text":"<p>Tout d\u2019abord, il faut t\u00e9l\u00e9charger SyntaxHighlighter. Les dossiers scripts et styles contiennent tout ce dont vous aurez besoin.</p> <p>Ces fichiers devront \u00eatre inclus dans l\u2019application GWT. Il existe diff\u00e9rentes m\u00e9thodes. J\u2019ai choisi de cr\u00e9er un r\u00e9pertoire public au m\u00eame niveau que le r\u00e9pertoire client, et d\u2019y placer les r\u00e9pertoires scripts et styles.</p> <p></p> <p>Ensuite, il suffit de les ajouter au module (fichier .gwt.xml) : <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;module&gt;\n&lt;!-- La CSS de base pour SyntaxHighlighter --&gt;\n&lt;stylesheet src=\"styles/shCore.css\"/&gt;\n&lt;!-- J'utilise le th\u00e8me Eclipse (8 th\u00e8mes disponibles) --&gt;\n&lt;stylesheet src=\"styles/shThemeEclipse.css\"/&gt;\n&lt;!-- Le javascript de base pour SyntaxHighlighter --&gt;\n&lt;script src=\"scripts/shCore.js\"/&gt;\n&lt;!-- Les extensions pour les diff\u00e9rents langages utilis\u00e9s --&gt;\n&lt;script src=\"scripts/shBrushJava.js\"/&gt;\n&lt;script src=\"scripts/shBrushXml.js\"/&gt;\n&lt;!-- [...] --&gt;\n&lt;/module&gt;\n</code></pre></p>"},{"location":"blog/coloration-syntaxique-en-gwt/#go-go-go","title":"Go, Go, GO!","text":"<p>A l\u2019origine, SyntaxHighlighter fonctionnait en parsant le DOM et en modifiant les n\u0153uds marqu\u00e9s comme conteneurs de code. La derni\u00e8re release propose une approche alternative, qui fonctionne ind\u00e9pendamment du DOM.</p> <p>Le fonctionnement est simple : une fonction Javascript prend en entr\u00e9e du code sous forme de String, et renvoie une String contenant le HTML pour afficher le code format\u00e9.</p> <p>Un brush (pinceau) est n\u00e9cessaire pour colorer du code. Il existe en fait un brush par langage, et celui-ci d\u00e9finit les mots cl\u00e9s, la syntaxe, etc.</p> <p>Il nous faut donc une fabrique de pinceaux :</p> <pre><code>public class BrushFactory {\npublic native JavaScriptObject newJavaBrush() /*-{\n        return new $wnd.SyntaxHighlighter.brushes.Java();\n    }-*/;\npublic native JavaScriptObject newXmlBrush() /*-{\n        return new $wnd.SyntaxHighlighter.brushes.Xml();\n    }-*/;\n}\n</code></pre> <p>Voici le code JSNI utilisant SyntaxHighlighter pour transformer du code en html : <pre><code>public class SyntaxHighlighter {\npublic static native String highlight(String code, JavaScriptObject brush, boolean toolbar) /*-{\n        var params = {};\n        params['toolbar'] = toolbar;\n        brush.init(params);\n        return brush.getHtml(code);\n    }-*/;\n}\n</code></pre> Notez le param\u00e8tre toolbar qui permet d\u2019afficher ou non la barre d\u2019outil. De nombreux param\u00e8tres sont disponibles ; \u00e0 vous de les int\u00e9grer.</p> <p>Ya plus qu\u2019\u00e0 utiliser tout \u00e7a, par exemple en r\u00e9cup\u00e9rant le code contenu dans une TextArea et en l\u2019affichant via un HTML.</p> <pre><code>public void bindTextAreaCodeToHtml(TextArea textArea, HTML html) {\nJavaScriptObject brush = BrushFactory.newJavaBrush();\nString code = textArea.getValue();\nString htmlCode = SyntaxHighlighter.highlight(code, brush, false);\nhtml.setHTML(htmlCode);\n}\n</code></pre>"},{"location":"blog/coloration-syntaxique-en-gwt/#conclusion","title":"Conclusion","text":"<p>Vous avez d\u00e9sormais toutes les cl\u00e9s en main pour faire de la coloration syntaxique c\u00f4t\u00e9 client en GWT.</p> <p>Bien entendu, ce code est \u00e0 adapter suivant vos besoins. Vous n\u2019\u00eates pas oblig\u00e9s d\u2019utiliser des static partout ;-) .</p>"},{"location":"blog/coloration-syntaxique-en-gwt/#comments","title":"Comments","text":""},{"location":"blog/coloration-syntaxique-en-gwt/#raphael-brugier-rbrugier","title":"Rapha\u00ebl Brugier (@rbrugier)","text":"<p>Hello,</p> <p>Int\u00e9ressant je n\u2019avais pas suivi le d\u00e9veloppement de SyntaxHighlighter avec la nouvelle m\u00e9thode sans le parsing du DOM.</p> <p>J\u2019avais utilis\u00e9 GWT + le plugin sur mon projet de stage l\u2019an dernier presque de la m\u00eame fa\u00e7on</p> <p>En tout cas continue les posts sur gwt, il y a du public </p> <p>Rapha\u00ebl.</p>"},{"location":"blog/coloration-syntaxique-en-gwt/#piwai","title":"Piwa\u00ef","text":"<p>Cool :) Je vais t\u00e2cher de continuer, j\u2019ai quelques id\u00e9es dans mon sac :)</p>"},{"location":"blog/coup-de-balai-deblayer-les-branches-dun-repo-git/","title":"Coup de balai deblayer les branches dun repo git","text":"<p>  [ | October 30, 2011]  </p> <p>Comme je vous l\u2019indiquais dans un [pr\u00e9c\u00e9dent article]tas-mis-a-jour-les-specs.md), chez Siine, nous h\u00e9bergeons nos projets sur GitHub, et chaque User Story fait l\u2019objet d\u2019une branche d\u00e9di\u00e9e.</p> <p>Lorsqu\u2019une branche qui a fait l\u2019objet d\u2019une pull request est valid\u00e9e, elle est merg\u00e9e sur la branche d\u2019int\u00e9gration. Nous n\u2019avons cependant pas pris l\u2019habitude de supprimer ces branches une fois merg\u00e9es. Je pense que nous aurions probablement du les supprimer au fur et \u00e0 mesure, car nous nous retrouvons aujourd\u2019hui avec de nombreuses branches merg\u00e9es, qui ne servent \u00e0 rien et qui polluent nos repository.</p> <p></p> <p>Branches konary by Krzysztof</p> <p>Notez que GitHub conserve l\u2019historique des pull request m\u00eame quand les branches sont supprim\u00e9es. Je ne vois vraiment aucune raison de conserver des branches merg\u00e9es. Et vous ?</p> <p>Quoi qu\u2019il en soit, il est tout \u00e0 fait possible de corriger cela, en quelques commandes Git bien senties. </p> <p>On r\u00e9cup\u00e8re toutes les donn\u00e9es du repository remote</p> <pre><code>git fetch --all\n</code></pre> <p>On supprime de notre repository local toutes les branches remote qui n\u2019existent plus</p> <pre><code>git remote prune origin\n</code></pre> <p></p> <p>Valor prune by Glysiak</p> <p>On compte toutes les **branches remote merg\u00e9es **:</p> <pre><code>git branch -r --merged origin/integration | wc -l\n</code></pre> <p>Le param\u00e8tre <code>-r</code> signifie remote, et <code>--merged origin/integration</code> permet de lister les branches merg\u00e9es dans origin/integration.</p> <p>Vous l\u2019aurez not\u00e9, <code>wc -l</code> est une commande Unix permettant de compter le nombre de lignes du flux d\u2019entr\u00e9e. Ainsi, on pourrait l\u2019utiliser pour compter le nombre de branches du repository remote :</p> <pre><code>git branch -r | wc -l\n</code></pre> <p>Il n\u2019y a plus qu\u2019\u00e0 supprimer les branches merg\u00e9es :</p> <pre><code># Supprimer la branche sur le remote\ngit push origin :my_branch\n# Et supprimer la branche qui la track en local\ngit branch -d my_branch\n</code></pre> <p>Notez aussi que GitHub met \u00e0 disposition ce listing sans avoir \u00e0 entrer une seule ligne de commande, en cliquant sur Branches.</p> <p></p> <p>Pour finir : si lister les branches merg\u00e9es permet de faire le m\u00e9nage, \u00e0 l\u2019inverse il peut \u00eatre int\u00e9ressant de prendre connaissance des branches non merg\u00e9es, car il se peut que certaines d\u2019entre elles aient \u00e9t\u00e9 oubli\u00e9es et soient \u00e0 l\u2019abandon. Pour cela, rien de plus simple :</p> <pre><code>git branch -r --no-merged origin/integration\n</code></pre>"},{"location":"blog/coup-de-balai-deblayer-les-branches-dun-repo-git/#comments","title":"Comments","text":""},{"location":"blog/coup-de-balai-deblayer-les-branches-dun-repo-git/#dvins","title":"Dvins","text":"<p>Salut Piwai ! Cet historique des branches supprim\u00e9es est-il propre \u00e0 Github ou est-ce inclus de base dans Git ? J\u2019utilise Git depuis peu (ASI = SVN comme tu le sais) et je commence en effet \u00e0 me retrouver avec un tas de branches merg\u00e9es qui polluent le d\u00e9p\u00f4t ! Merci d\u2019avance !</p>"},{"location":"blog/coup-de-balai-deblayer-les-branches-dun-repo-git/#piwai","title":"Piwa\u00ef","text":"<p>Salut Dvins!</p> <p>Github conserve l\u2019historique des \u201cpull request\u201d, pas des \u201cbranches supprim\u00e9es\u201d. Il n\u2019y a pas de notion \u201cd\u2019historique des branches supprim\u00e9es\u201d dans git. Les branches, tout comme les tags, sont de simples marqueurs sur un graphe, qui identifient des commits particuliers.</p> <p>Supprimer une branche, c\u2019est supprimer un marqueur, ni plus ni moins  .</p> <p>Par ailleurs, effectivement, les commandes que je donne ici sont des commandes Git, et donc fonctionnent sur n\u2019importe quel repo git.</p>"},{"location":"blog/happy-birthday-androidannotations/","title":"Happy birthday androidannotations","text":"<p>  [ | December 22, 2012]  </p> <p>Two years ago, I created AndroidAnnotations. </p> <p></p> <p>Lesson n\u00b01: think before writing your first commit message</p> <p>Time to take a look back at the last two years!</p> Warning!   This article contains trivia, useless statistics, and too much me and I. You have been warned."},{"location":"blog/happy-birthday-androidannotations/#background","title":"@Background","text":"<p>I started writing Android apps in 2009. I came from the Java/JEE world, in which you can find tons of frameworks and good practices. Android didn\u2019t feel right: my whole codebase was tied to the <code>Activity</code> class, and I didn\u2019t find the code to be much readable and maintainable.</p> <p>I wanted to decouple my code components using IoC &amp; Dependency Injection, so I tried a few things:</p> <ul> <li>Spring IoC, which relied on JDK classes not available in Android, and crashed.</li> <li>Creating the dependency graph manually, in code. Worked great, until the dependency graph became too big and hard to maintain.</li> <li>Creating a small DI container that didn\u2019t rely on reflection. It wasn\u2019t typesafe though, and it required tons of anonymous classes.</li> </ul> <p>Then I discovered RoboGuice, started using it and contributing. I really liked that you could inject Android specific components such as views and resource. This isn\u2019t really dependency injection, but it still makes your code much more readable. The bad part though was the performance hit on startup, because RoboGuice relied on reflection.</p> <p>On the 14th of december 2010, Olivier Croisier presented the Annotation Processors at the ParisJUG. A few days later, AndroidAnnotations was born.</p> <p>The name AndroidAnnotations comes from the <code>AndroidAnnotationProcessor</code> class that handles the annotation processing.</p> <p>The focus in AndroidAnnotations has never really been about dependency injection, but rather about creating annotations to simplify your code and make your life easier, at compile time. It started with view injection, then event binding (based on GWT @UiHandler), resource injection, simplified threading\u2026</p> <p></p>"},{"location":"blog/happy-birthday-androidannotations/#timeline","title":"@Timeline","text":"<ul> <li> <p>December 2010 First commit</p> </li> <li> <p>January 2011 First external code contribution</p> </li> <li> <p>April 2011 Release of the 2.0 version</p> </li> <li> <p>August 2011 Roy Clarkson mentions AndroidAnnotations on the SpringSource Blog</p> </li> <li> <p>September 2011 eBusiness Information becomes the official sponsor</p> </li> <li> <p>October 2011 Matthias Kaeppler mentions AndroidAnnotations at DroidCon London 2011</p> </li> <li> <p>January 2012 Migration from Google Code to GitHub</p> </li> <li> <p>April 2012 Talk at Devoxx France</p> </li> <li> <p>October 2012 Talk at Devoxx</p> </li> </ul> <p></p>"},{"location":"blog/happy-birthday-androidannotations/#randomstats","title":"@RandomStats","text":"<ul> <li>953 commits and more than 35000 lines of code</li> <li>124 Pull Requests</li> <li>15 code contributors</li> <li>More than 400 apps on Google Play (source)</li> <li>89 members on the mailing list</li> <li>36 StackOverflow questions</li> <li>319 @AndAnnotations followers</li> <li>355 followers &amp; 419 +1  on Google+</li> <li>654 stargazers &amp; 101 forks on GitHub</li> </ul>"},{"location":"blog/happy-birthday-androidannotations/#future","title":"@Future","text":"<p>AndroidAnnotations will continue to concentrate on simplifying your Android code with compile time code generation. I think Android developers should be able to pickup their frameworks of choice and use them all together.</p> <p>Here is a sample project that uses Dagger for dependency injection, AndroidAnnotations for boilerplate removal, and Otto as an event bus.</p> <p>Let\u2019s see what happens over the next two years!</p>"},{"location":"blog/happy-birthday-androidannotations/#comments","title":"Comments","text":""},{"location":"blog/les-ide-et-la-regle-des-80-120/","title":"Les ide et la regle des 80 120","text":"<p>  [ | August 31, 2011]  </p> <p>Cet article n\u2019a strictement rien \u00e0 voir avec Pareto. Un peu plus avec un tweet datant de quelques mois.</p> <p>La longueur maximale des lignes de code est un d\u00e9bat r\u00e9current dans les \u00e9quipes de d\u00e9veloppement. </p> <p>D\u00e8s lors que l\u2019on met en place un formatage du code automatique et partag\u00e9 par tous les d\u00e9veloppeurs (notamment pour faciliter les diff), l\u2019\u00e9ternelle question revient : </p> <p>80 ou 120 ? Robert</p> <p></p> <p>\u00c7a fait 5 ans qu\u2019on a tous des 19 pouces, on pourrait peut-\u00eatre passer \u00e0 160 non ? G\u00e9rard</p>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#que-nenni","title":"Que nenni !","text":"<p>Voici la configuration que j\u2019utilise :</p> <p></p> <p>Vous avez bien lu, je pr\u00e9f\u00e8re 1000. Ou 2000. Ou 10000. Ou\u2026 bon, je suppose que vous avez compris.</p> <p>Non pas que j\u2019ai la chance de disposer d\u2019un \u00e9cran de cin\u00e9ma pour coder, pour moi il s\u2019agit juste de bonnes pratiques.</p> <p>Ce n\u2019est pas votre IDE qui doit d\u00e9cider de la longueur de vos lignes de code, c\u2019est vous.</p> <p>Une ligne de code qui d\u00e9passe la largeur de l\u2019\u00e9cran, c\u2019est un code smell. Laisser l\u2019IDE ajouter des retours \u00e0 la ligne, c\u2019est cacher le code smell.</p> <p>Un peu comme mettre du d\u00e9o sans se doucher apr\u00e8s un jogging.</p> <p>Pour la route, quelques cas classiques de longlignite aig\u00fce :</p>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#le-syndrome-du-developpeur-c-aka-le-radin-des-variables","title":"Le syndrome du d\u00e9veloppeur C, aka le radin des variables","text":"<p>A l\u2019origine, en C, il fallait d\u00e9clarer toutes les variables locales d\u2019une proc\u00e9dure au d\u00e9but de celle-ci. Ce n\u2019est pas forc\u00e9ment une mauvaise id\u00e9e.</p> <p>Mais en combinant cela avec l\u2019id\u00e9e qu\u2019une variable locale, c\u2019est forc\u00e9ment de la m\u00e9moire utilis\u00e9e en plus et donc de la \u201cperformance\u201d en moins, on prend rapidement la bonne habitude de cr\u00e9er le moins de variables locales possibles.</p> <p>Un exemple de la vraie vie :</p> <pre><code>WebApplicationContextUtils.getWebApplicationContext(this.getServletContext()).getAutowireCapableBeanFactory().autowireBeanProperties(this, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true);\n</code></pre> <p>Vous trouvez-\u00e7a lisible vous ?</p> <p>C\u2019est peut-\u00eatre super excitant \u00e0 \u00e9crire (ah \u00e7a c\u2019est s\u00fbr on est fier hein, on a utilis\u00e9 aucune variable\u2026). Et PAN, +10000\u20ac de dette technique.</p> <p>La solution est simple, elle s\u2019appelle la variable locale. D\u00e9coupez votre code, cr\u00e9ez des variables locales m\u00eame si elles ne servent qu\u2019une fois.  Et d\u00e9coupez votre code en petites m\u00e9thodes. </p> <p>Moins de 5 lignes, c\u2019est bien. Au passage, je vous recommande chaudement la lecture de Clean Code :-).</p> <p>On comprend d\u00e9j\u00e0 mieux :</p> <pre><code>ServletContext servletContext = this.getServletContext();\nWebApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(servletContext);\nAutowireCapableBeanFactory beanFactory = applicationContext.getAutowireCapableBeanFactory();\nbeanFactory.autowireBeanProperties(this, AutowireCapableBeanFactory.AUTOWIRE_BY_NAME, true);\n</code></pre>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#le-fan-de-programmation-fonctionnelle","title":"Le fan de programmation fonctionnelle","text":"<p>Le mec, un jour, il a d\u00e9couvert Google Guava et ses Function ; il a trouv\u00e9 \u00e7a trop cool et a adopt\u00e9 le \u201cstyle fonctionnel\u201d dans tous ses d\u00e9veloppements. Malheureusement, en Java, cela se traduit par des classes anonymes (\u00e0 moins d\u2019utiliser FJF\u2026 pub ;-)), et cela d\u00e9borde vite de l\u2019\u00e9cran !</p> <p>Encore un exemple de la vraie vie, un peu maquill\u00e9 et all\u00e9g\u00e9 pour l\u2019occasion :</p> <pre><code>public class MyPanel extends Composite {\npublic MyPanel() {\nfinal Request request = new Request();\ninitWidget(new VerticalPanel() {\nadd(new HorizontalPanel() {\n{\nadd(new RadioButton(\"native\", \"native\") {\n{\nsetValue(request.isNativeRequest());\naddClickHandler(new ClickHandler() {\npublic void onClick(ClickEvent event) {\nrequest.setNativeRequest(getValue());\n}\n});\n}\n});\n}\n});\nadd(new Button(\"Run\", new ClickHandler() {\npublic void onClick(ClickEvent event) {\nServicesHolder.requestService.execute(request, new AsyncCallback&lt;Response&gt;() {\npublic void onFailure(Throwable caught) {\nWindow.alert(caught.getMessage());\n}\npublic void onSuccess(Response response) {\ntry {\nupdateUi(response);\n} catch (Exception e) {\nonFailure(e);\n}\n}\n});\n}\n}));\n}\n});\n}\n}\n</code></pre> <p>Quand je tombe sur une classe qui comporte 1000 lignes comme \u00e7a, j\u2019ai beaucoup de mal \u00e0 suivre le flux d\u2019ex\u00e9cution. Pas vous ?</p>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#lutilisation-dune-fluid-interface","title":"L\u2019utilisation d\u2019une Fluid interface","text":"<p>Les Fluid interfaces, par design, sont faites pour permettre les appels cha\u00een\u00e9s, afin d\u2019augmenter la lisibilit\u00e9 du code et \u00e9ventuellement cr\u00e9er des DSL.</p> <p>Si la cha\u00eene d\u2019appels de m\u00e9thode est courte et a un sens grammatical, il para\u00eet alors sens\u00e9 de la laisser sur une ligne, sans que l\u2019IDE ne formate cette ligne.</p> <p>Exemple avec un binding Guice :</p> <pre><code>bind(Geek.class).annotatedWith(Piwai.class).toInstance(piwai);\n</code></pre> <p>Par contre, si la cha\u00eene d\u2019appels est trop longue, \u00e0 vous de la d\u00e9couper \u00e0 votre go\u00fbt sur plusieurs lignes.</p> <p>Une astuce simple consiste \u00e0 ajouter \u201c//\u201d en fin de ligne, pour emp\u00eacher l\u2019IDE de recoller ensemble des appels de m\u00e9thodes que l\u2019on a d\u00e9cid\u00e9 de s\u00e9parer.</p> <p>Par exemple, pour utiliser un SharedPreferences helper g\u00e9n\u00e9r\u00e9 par AndroidAnnotations:</p> <pre><code>prefs.edit() //\n.clear() //\n.name().put(\"John Smith\") //\n.age().put(42) //\n.done();\n</code></pre> <p>A vous maintenant : qui a d\u2019autres exemples de longlignite aig\u00fce ?</p>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#comments","title":"Comments","text":""},{"location":"blog/les-ide-et-la-regle-des-80-120/#baztoune","title":"Baztoune","text":"<p>Ah, l\u2019\u00e9ternelle question :D \u00e7a me rappelle ce topic sur SO Dans l\u2019absolu, je suis d\u2019accord, c\u2019est bien au d\u00e9veloppeur de d\u00e9couper ses lignes, pour donner du rythme \u00e0 son code et le rendre lisible, mais en \u00e9quipe, ne vaut-il mieux pas assurer l\u2019uniformisation de l\u2019apparence du code? Pas sp\u00e9cialement pour le gestionnaire de sources qui se d\u00e9brouille tr\u00e8s bien, mais pour la lisibilit\u00e9 globale du code, et ainsi \u00e9viter les disparit\u00e9s de style entre d\u00e9veloppeurs.</p>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#gabriel-kastenbaum","title":"Gabriel Kastenbaum","text":"<p>J\u2019ai juste une r\u00e8gle, qui diff\u00e8re un peu de la r\u00e8gle usuelle du nombre de lignes :</p> <p>une m\u00e9thode doit \u00eatre lisible d\u2019un coup d\u2019oeil. On parle toujours du nombre de lignes par m\u00e9thode. Il faut aussi parler des lignes trop longues en largeur. C\u2019est aussi fautif amha Apr\u00e8s (cf. exemple de la classe anonyme) java n\u2019aide pas toujours.  Mais l\u2019id\u00e9e est l\u00e0. Pour un \u00e9cran normal, il faut pouvoir tout lire d\u2019un coup.</p> <p>J\u2019ai d\u00e9j\u00e0 gal\u00e9r\u00e9 sur des m\u00e9thodes dont le bug se voyait quand on scrollait \u00e0 droite. Or je ne scrolle JAMAIS \u00e0 droite. je n\u2019y pense jamais.</p> <p>C\u2019est pq dans Eclipse je laisse une line width de 120 \u00e0 peu pr\u00e8s. L\u2019\u00e9cran est une feuille.</p>"},{"location":"blog/les-ide-et-la-regle-des-80-120/#francois-marot","title":"Francois Marot","text":"<p>Entierement d\u2019accord avec ce post. Pour moi le formatteur est un mal n\u00e9cessaire (pour uniformiser tout ce qui est tabulation, espacement, supprimer d\u2019\u00e9ventuels saut de lignes multiple, et surtout faciliter les diff/merges) mais il doit en faire le strict minimum. Le d\u00e9veloppeur doit rester au manette, et si ponctuellement on veut pouvoir faire un ligne longue (pour mettre un commentaire sur un truc touchy par exemple), on doit pouvoir le faire. Tant que ca reste de facon exceptionnelle et justifi\u00e9e. Donc des formatteurs de code, oui, mais de facon minimum.</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/","title":"Les mains dans le cambuibinder","text":"<p>  [ | September 13, 2011]  </p> <p>L\u2019article pr\u00e9c\u00e9dent montrait comment faire de la coloration syntaxique en GWT.</p> <p>Toujours pour Rockslide, je souhaitais pouvoir \u00e9crire le code \u00e0 mettre en forme dans des templates UiBinder, plut\u00f4t que dans des Strings statiques port\u00e9es par des classes Java.</p> <p>Est-ce possible ? Comment y parvenir ? En creusant ces questions, j\u2019ai r\u00e9alis\u00e9 que UiBinder poss\u00e8de de nombreuses facettes non document\u00e9es et qui m\u00e9ritent que l\u2019on s\u2019y attarde. Tour du propri\u00e9taire.</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#widgets-customs","title":"Widgets customs","text":"<p>Vous le savez probablement, il est possible d\u2019inclure ses propres widgets GWT dans un template UiBinder.</p> <p>Il suffit pour cela d\u2019\u00e9tendre la classe Widget. Prenons l\u2019exemple d\u2019un bouton ouvrant une fen\u00eatre d\u2019alerte :</p> <pre><code>public class AlertButton extends Button implements ClickHandler {\npublic AlertButton() {\naddClickHandler(this);\n}\n@Override\npublic void onClick(ClickEvent event) {\nWindow.alert(\"I like turtles\");\n}\n}\n</code></pre> <p>Vous pouvez ensuite l\u2019inclure dans vos templates UiBinder, en ajoutant un namespace correspondant au package de votre widget :</p> <pre><code>&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:AlertButton /&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre> <p>Un peu limit\u00e9 quand m\u00eame\u2026</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#et-avec-des-parametres","title":"Et avec des param\u00e8tres ?","text":"<p>Il y a mieux ! Vous pouvez tout \u00e0 fait passer des param\u00e8tres \u00e0 votre widget. Il suffit d\u2019ajouter des param\u00e8tres de constructeur (donc obligatoires) ou des setters (donc facultatifs) \u00e0 votre widget :</p> <p><pre><code>public class AlertButton extends Button implements ClickHandler {\nprivate final String msg;\n@UiConstructor\npublic AlertButton(String msg) {\nthis.msg = msg;\naddClickHandler(this);\n}\n@Override\npublic void onClick(ClickEvent event) {\nWindow.alert(msg);\n}\n}\n</code></pre> Notez la pr\u00e9sence de @UiConstructor, n\u00e9cessaire lorsque le constructeur par d\u00e9faut n\u2019est pas d\u00e9fini.</p> <p>Puis d\u2019utiliser les attributs correspondants dans vos templates UiBinder :</p> <pre><code>&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:AlertButton msg=\"I like turtles\" /&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre>"},{"location":"blog/les-mains-dans-le-cambuibinder/#les-attributs-ca-pue","title":"Les attributs, \u00e7a pue ?","text":"<p>Si votre widget impl\u00e9mente HasText, vous pourrez alors d\u00e9finir ce texte directement au sein de la balise au lieu d\u2019utiliser des attributs. Modifions AlertButton :</p> <p><pre><code>public class AlertButton extends Button implements ClickHandler, HasText {\nprivate String msg = \"Default Message\";\npublic AlertButton() {\naddClickHandler(this);\n}\n@Override\npublic void setText(String msg) {\nthis.msg = msg;\n}\n@Override\npublic void onClick(ClickEvent event) {\nWindow.alert(msg);\n}\n@Override\npublic void getText() {\nthrow new UnsupportedOperationException();\n}\n}\n</code></pre> Notez que l\u2019interface HasText impose d\u2019impl\u00e9menter getText(), mais cette m\u00e9thode n\u2019est pas n\u00e9cessaire pour nos besoins.</p> <p>C\u2019est d\u00e9j\u00e0 plus sympa : <pre><code>&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:AlertButton&gt;I like turtles&lt;/custom:AlertButton&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre></p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#quid-du-html","title":"Quid du HTML ?","text":"<p>Vous pouvez aussi inclure, au sein de vos widgets, du HTML d\u00e9fini dans votre template UiBinder, gr\u00e2ce \u00e0 HasHTML.</p> <p>Par exemple, supposons que je souhaite enrichir mon AlertButton pour afficher de belles popups, en utilisant une DialogBox :</p> <p><pre><code>public class AlertButton extends Button implements ClickHandler, HasHTML {\nprivate String html = \"\";\nprivate String title = \"Default title\";\npublic AlertButton() {\naddClickHandler(this);\n}\n@Override\npublic void setHTML(String html) {\nthis.html = html;\n}\n@Override\npublic void setTitle(final String title) {\nthis.title = title;\n}\n@Override\npublic void onClick(ClickEvent event) {\nDialogBox dialogBox = new DialogBox();\ndialogBox.setWidget(new HTML(html));\ndialogBox.setText(title);\ndialogBox.center();\n}\n@Override\npublic void getText() {\nthrow new UnsupportedOperationException();\n}\n@Override\npublic void setText(String text) {\nthrow new UnsupportedOperationException();\n}\n@Override\npublic String getHTML() {\nthrow new UnsupportedOperationException();\n}\n}\n</code></pre> La m\u00e9thode setHTML() est appel\u00e9e avec en param\u00e8tre le HTML sous forme de String.</p> <p>Je peux d\u00e9sormais sp\u00e9cifier le contenu HTML de cette bo\u00eete de dialogue dans mon template UiBinder : </p> <pre><code>&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:AlertButton title=\"I like turtles\"&gt;\n&lt;p&gt;\nI &lt;strong&gt;really&lt;/strong&gt; like turtles!&lt;br /&gt;\nWhat about &lt;em&gt;you&lt;/em&gt;?\n            &lt;/p&gt;\n&lt;/custom:AlertButton&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre>"},{"location":"blog/les-mains-dans-le-cambuibinder/#nbsp","title":"&amp;nbsp; ?","text":"<p>Comment utiliser des entit\u00e9s HTML dans vos templates UiBinder ? Il suffit d\u2019ajouter la DTD fournie par Google :</p> <pre><code>&lt;!DOCTYPE ui:UiBinder SYSTEM \"http://dl.google.com/gwt/DTD/xhtml.ent\"&gt;\n&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:AlertButton title=\"I like turtles\"&gt;\n&lt;p&gt;\nTurtles &amp;gt; Dolphins!\n            &lt;/p&gt;\n&lt;/custom:AlertButton&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre>"},{"location":"blog/les-mains-dans-le-cambuibinder/#parametres-complexes","title":"Param\u00e8tres complexes","text":"<p> permet d\u2019injecter un objet (cr\u00e9\u00e9 via GWT.create()) dans votre template UiBinder.</p> <p>Un exemple d\u2019utilisation serait l\u2019injection d\u2019une Enum afin de param\u00e9trer un widget.</p> <p>Reprenons notre fen\u00eatre d\u2019alerte initiale :</p> <pre><code>public class AlertButton extends Button implements ClickHandler {\nprivate final Animal animal;\n@UiConstructor\npublic AlertButton(Animal animal) {\nthis.animal = animal;\naddClickHandler(this);\n}\n@Override\npublic void onClick(ClickEvent event) {\nWindow.alert(\"I like \" + animal.toString());\n}\n}\n</code></pre> <p>Animal est une simple Enum : <pre><code>public Enum Animal {\nTURTLES, DOLPHINS;\n}\n</code></pre></p> <p>Il ne reste plus qu\u2019\u00e0 utiliser l\u2019Enum en question dans le template UiBinder : <pre><code>&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;ui:with field=\"animal\" type=\"info.piwai.blog.Animal\"/&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:AlertButton animal=\"{animal.TURTLES}\" /&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre> Cerise sur le gateau, on b\u00e9n\u00e9ficie de l\u2019autocompl\u00e9tion : en tapant {animal.}, l\u2019IDE propose TURTLES ou DOLPHINS !</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#bon-et-la-coloration-syntaxique-alors","title":"Bon, et la coloration syntaxique alors ?","text":"<p>En combinant tout ce qui a \u00e9t\u00e9 dit pr\u00e9c\u00e9demment, il est possible d\u2019\u00e9crire des exemples de code au sein de templates UiBinder, mis en forme par SyntaxHighlighter. On utilisera pour cela un widget impl\u00e9mentant HasHTML. </p> <p>Avant de passer aux choses s\u00e9rieuses, un rappel. Dans l\u2019article pr\u00e9c\u00e9dent, nous utilisions le code suivant pour faire de la coloration syntaxique en GWT :</p> <pre><code>public void bindTextAreaCodeToHtml(TextArea textArea, HTML html) {\nJavaScriptObject brush = BrushFactory.newJavaBrush();\nString code = textArea.getValue();\nString htmlCode = SyntaxHighlighter.highlight(code, brush, false);\nhtml.setHTML(htmlCode);\n}\n</code></pre> <p>Une pr\u00e9cision : Le parseur UiBinder utilis\u00e9 pour les widgets impl\u00e9mentant HasHTML ne garde pas les retours \u00e0 la ligne, ce qui se r\u00e9v\u00e8le g\u00eanant lorsque son contenu est du code mis en forme. Pour contourner cela, on peut utiliser une balise <code>&lt;pre&gt;</code> dans le template UiBinder.</p> <p>Tr\u00eave de suspens, voici le r\u00e9sultat :</p> <p><pre><code>public class Code extends Composite implements HasHTML {\nprivate JavaScriptObject brush = null;\nprivate HTML panel = new HTML();\n@UiConstructor\npublic Code() {\ninitWidget(panel);\n}\npublic void setBrush(JavaScriptObject brush) {\nthis.brush = brush;\n}\n@Override\npublic void setHTML(String html) {\n// On supprime la balise &lt;pre&gt;\nfinal String code = html.replaceFirst(\"&lt;pre&gt;\", \"\").replaceFirst(\"&lt;/pre&gt;\", \"\");\nScheduler.get().scheduleDeferred(new ScheduledCommand() {\n@Override\npublic void execute() {\nif (brush != null) {\nString codeAsHtml = SyntaxHighlighter.highlight(code, brush, false);\npanel.setHTML(codeAsHtml);\n}\n}\n});\n}\n@Override\npublic void getText() {\nthrow new UnsupportedOperationException();\n}\n@Override\npublic void setText(String text) {\nthrow new UnsupportedOperationException();\n}\n@Override\npublic String getHTML() {\nthrow new UnsupportedOperationException();\n}\n}\n</code></pre> Notez l\u2019utilisation du Scheduler pour afficher le code imm\u00e9diatement apr\u00e8s la construction du widget. L\u2019ordre de valorisation des attributs n\u2019\u00e9tant pas garanti, cela permet d\u2019\u00eatre s\u00fbr que la valeur du champ brush aura \u00e9t\u00e9 pr\u00e9alablement inject\u00e9e au moment de l\u2019appel \u00e0 SyntaxHighlighter.</p> <p>On peut ensuite utiliser ce widget dans un template UiBinder classique :</p> <p><pre><code>&lt;!DOCTYPE ui:UiBinder SYSTEM \"http://dl.google.com/gwt/DTD/xhtml.ent\"&gt;\n&lt;ui:UiBinder\nxmlns:ui='urn:ui:com.google.gwt.uibinder'\nxmlns:g='urn:import:com.google.gwt.user.client.ui'\nxmlns:custom='urn:import:info.piwai.blog.ui'\n&gt;\n&lt;ui:with field=\"brushFactory\" type=\"info.piwai.blog.BrushFactory\"/&gt;\n&lt;g:FlowPanel&gt;\n&lt;custom:Code brush=\"{brushFactory.newJavaBrush}\"&gt;&lt;pre&gt;\npublic class Main {\n                public static void main(String[] args) throws Exception {\n                    List&amp;lt;String&amp;gt; moto = Arrays.asList(\"I\", \"Like\", \"Turtles\");\n                    System.out.println(moto);\n                }\n            }&lt;/pre&gt;     &lt;/custom:Code&gt;\n&lt;/g:FlowPanel&gt;\n&lt;/ui:UiBinder&gt;\n</code></pre> Les caract\u00e8res &lt; et &gt; doivent \u00eatre \u00e9chapp\u00e9s pour \u00e9viter qu\u2019ils ne soient interpr\u00e9t\u00e9s par UiBinder et ne conduisent \u00e0 des erreurs de validation. Ainsi, au lieu de List, on \u00e9crit List&lt;String&gt; <p>Edit : Merci @matboniface, j\u2019avais au d\u00e9part parl\u00e9 d\u2019\u00e9chapper des entit\u00e9s HTML, ce qui n\u2019a pas beaucoup de sens.</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#conclusion","title":"Conclusion","text":"<p>Cet article s\u2019est r\u00e9v\u00e9l\u00e9 plus long que ce que j\u2019avais en t\u00eate initialement ! J\u2019esp\u00e8re qu\u2019il vous aura fait d\u00e9couvrir des aspects int\u00e9ressants et souvent m\u00e9connus de UiBinder. </p> <p>N\u2019h\u00e9sitez pas \u00e0 compl\u00e9ter ce billet avec vos trucs et astuces UiBinder en commentaire !</p> <p>Vous pouvez aussi vous abonner au Flux RSS. Je me suis fix\u00e9 comme objectif de publier un article par semaine, on verra si je tiens le rythme ;-) .</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#comments","title":"Comments","text":""},{"location":"blog/les-mains-dans-le-cambuibinder/#nicolas-francois","title":"Nicolas Fran\u00e7ois","text":"<p>Article sympa ! Bon allez, j\u2019ai aussi un truc sympa qui n\u2019est pas dans tes astuces. Admettons que j\u2019utilise une api gwt externe, et que le composant que je souhaite ins\u00e9rer ne poss\u00e8de pas de constructeur par d\u00e9faut. Je pourrais m\u2019amuser \u00e0 recompiler le code en ajoutant un @UiConstructeur mais c\u2019est ch**** \u00e0 faire et cot\u00e9 maintenance un joli bordel. La solution est tr\u00e8s simple : Je l\u2019utilise l\u2019air de rien dans le xml, mais dans le java, je le d\u00e9clare de la fa\u00e7on suivante :</p> <pre><code>@UiField(provided=true)\nMegaComponentOfTheDeath mcoth= new MegaComponentOfTheDeath(machin, bidule, truc);\n</code></pre> <p>Le provided indique que l\u2019instanciation est fournie par le java.</p> <p>Autre cas o\u00f9 c\u2019est utile : Injection de ressources via GIN, le composant utilise un resource bundle qui est inject\u00e9 dans le code java grace \u00e0 gin.</p> <pre><code>@UiField(provided=true)\nResource res;\n@Inject\npublic void setRes(Resource res){\nthis.res = res;\n}\n</code></pre>"},{"location":"blog/les-mains-dans-le-cambuibinder/#eric-b-vvinnie","title":"Eric B. (@vvinnie)","text":"<p>Et pourquoi pas un petit enrobage en CDATA plut\u00f4t que de rendre les illisibles. D\u2019ailleurs, question philosophique : et si les generics avaient mauvaise r\u00e9putation seulement parce que les gens essaient d\u2019en parler en html ? hum ?</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#piwai","title":"Piwa\u00ef","text":"<p>\u201crendre les illisibles\u201d =&gt; \u201crendre les <code>&lt; &gt;</code> illisibles\u201d (les signes ont saut\u00e9s de ton commentaire, vu que le HTML est activ\u00e9  )</p> <p>Grumph. Je n\u2019y avais pas pens\u00e9\u2026 \u00e7a a l\u2019air de fonctionner, en tout cas ya aucune erreur de validation. A voir si CDATA pr\u00e9serve bien les retours \u00e0 la ligne (comme \u00e7a plus besoin de <code>&lt;pre&gt;</code>), et comment \u00e7a se pr\u00e9sente ensuite au runtime en terme de manipulation du DOM (=&gt; que contient la string envoy\u00e9e \u00e0 setHTML ou setText ..)</p> <p>Je testerai \u00e7a \u00e0 l\u2019occasion, mais si \u00e7a marche c\u2019est plut\u00f4t g\u00e9nial, \u00e7a permet de simplifier \u00e0 mort le code. Merci !</p>"},{"location":"blog/les-mains-dans-le-cambuibinder/#piwai_1","title":"Piwa\u00ef","text":"<p>Je viens de v\u00e9rifier : CDATA permet effectivement de ne plus \u00e9chapper les chevrons. Par contre, avec UiBinder, il ne conserve pas les retours chariot. Il convient donc d\u2019utiliser pre et CDATA en compl\u00e9ment.</p>"},{"location":"blog/paris-android-dev-lab/","title":"Paris android dev lab","text":"<p>  [ | November 6, 2011]  </p>"},{"location":"blog/paris-android-dev-lab/#introduction","title":"Introduction","text":"<p>Un Android Developer Labs (ADL) s\u2019est d\u00e9roul\u00e9 \u00e0 Paris jeudi 27 et vendredi 28 octobre 2011, traitant de l\u2019optimisation des applications Android pour les tablettes.</p> <p>J\u2019ai eu la chance d\u2019\u00eatre invit\u00e9 \u00e0 cet \u00e9v\u00e8nement ; j\u2019en ai donc profit\u00e9 pour prendre des notes afin de pouvoir retranscrire le d\u00e9roulement de cette journ\u00e9e (l\u2019ADL du vendredi).</p>"},{"location":"blog/paris-android-dev-lab/#apero-android","title":"Ap\u00e9ro Android","text":"<p>Avant tout, laissez-moi vous parler de l\u2019ap\u00e9ro Android. Sachant que les places pour l\u2019ADL \u00e9taient limit\u00e9es, le Paris Android User Group (PAUG) a organis\u00e9 un ap\u00e9ro Android le jeudi soir, pour permettre \u00e0 tous de discuter et de rencontrer les Android Developer Advocates.</p> <p></p> <p>Les Googlers sont tr\u00e8s ouverts et abordables, et nous avons pass\u00e9 une soir\u00e9e sympatique, en partie aux frais de FrAndroid. Je vous conseille vivement ce type de rencontre ; c\u2019est un bon moyen d\u2019apprendre et de rencontrer des gens int\u00e9ressants tout en passant un bon moment.</p> <p></p> <p>Au cours de la soir\u00e9e, j\u2019ai eu le plaisir de constater que deux Android Developer Advocates (Nick Butcher et Richard Hyndman) connaissaient AndroidAnnotations, suite au talk de Matthias Kaeppler \u00e0 la DroidCon 2011.</p>"},{"location":"blog/paris-android-dev-lab/#ladl","title":"L\u2019ADL","text":"<p>Le programme de la journ\u00e9e \u00e9tait le suivant : </p> <ul> <li>Introduction aux tablettes</li> <li>Quoi de neuf dans Ice Cream Sandwich</li> <li>Android Market pour d\u00e9veloppeurs</li> <li>D\u00e9velopper pour t\u00e9l\u00e9phones et tablettes</li> <li>Codelab</li> </ul> <p>J\u2019ai pris des notes du mieux possible ; j\u2019esp\u00e8re que vous me saurez gr\u00e9 des lacunes \u00e9ventuelles et de la faible mise en forme.</p>"},{"location":"blog/paris-android-dev-lab/#introduction-aux-tablettes","title":"Introduction aux tablettes","text":"<p>Cette pr\u00e9sentation fut consacr\u00e9e aux sp\u00e9cificit\u00e9s li\u00e9es \u00e0 Honeycomb et au d\u00e9veloppement pour tablettes.</p> <p>Notez qu\u2019Honeycomb est uniquement orient\u00e9 tablette : l\u2019\u00e9quipe Android n\u2019avait pas le temps de r\u00e9aliser un OS pour t\u00e9l\u00e9phones en parall\u00e8le.</p>"},{"location":"blog/paris-android-dev-lab/#system-bar","title":"System bar","text":"<p>Auparavant, les informations syst\u00e8me et les notifications \u00e9taient situ\u00e9es dans une barre en haut de l\u2019\u00e9cran.</p> <p></p> <p>D\u00e9sormais, cette barre se situe en bas de l\u2019\u00e9cran, et contient en outre les boutons de navigation. Cela permet de se d\u00e9barrasser des boutons physiques, qui \u00e9taient mal plac\u00e9s lorsque l\u2019on passait en mode paysage.</p> <p></p> <p>Les notifications sont d\u00e9sormais accessibles sans couvrir totalement l\u2019\u00e9cran, de m\u00eame qu\u2019un certain nombre de r\u00e9glages et informations bien pratiques.</p> <p></p> <p>Cette barre peut distraire l\u2019attention visuelle lorsque vous souhaitez une exp\u00e9rience immersive. Il est possible de la cacher en utilisant le code suivant :</p> <pre><code>mView.setSystemUiVisibility(View.STATUS_BAR_HIDDEN)\n</code></pre> <p>Note : je me demande bien pourquoi cette m\u00e9thode n\u2019est pas statique et appartient \u00e0 View ; si vous avez une id\u00e9e, n\u2019h\u00e9sitez pas \u00e0 commenter.</p> <p>Dans le screenshot suivant, comme vous le voyez, la barre ne dispara\u00eet pas totalement. Elle devient noire, mais les ic\u00f4nes sont remplac\u00e9s par des points gris toujours cliquables.</p> <p></p> <p>Note : ce screenshot montre le dernier niveau de Wind-up Knight, un jeu sympa qui est un bon exemple de l\u2019efficacit\u00e9 du paiement in-app (la preuve, je n\u2019ai pas r\u00e9sist\u00e9 et ce f\u00fbt l\u2019occasion de r\u00e9aliser mon premier paiement in-app).</p>"},{"location":"blog/paris-android-dev-lab/#action-bar","title":"Action bar","text":"<p>Vous souvenez-vous d\u2019Android 1.X, o\u00f9 la barre de titre occupait une place \u00e9norme qui ne servait \u00e0 rien ?</p> <p></p> <p>Autant utiliser cet espace !</p> <p>C\u2019est le principe de l\u2019action bar. Celle-ci comporte tout d\u2019abord une ic\u00f4ne cliquable qui permet de retourner \u00e0 tout moment \u00e0 l\u2019\u00e9cran d\u2019accueil.Elle affiche ensuite des \u00e9l\u00e9ments li\u00e9s \u00e0 la navigation, et pour finir des ic\u00f4nes d\u2019action.</p> <p>Cette action bar n\u2019est pas n\u00e9cessairement un composant Android, il s\u2019agit plut\u00f4t d\u2019un design pattern de UI, que toute application Android digne de ce nom devrait respecter.</p> <p>Le projet ActionBarCompat, disponible dans les samples depuis ADT 14, met \u00e0 disposition tout le code et les ressources n\u00e9cessaires \u00e0 la cr\u00e9ation d\u2019une action bar fonctionnant sur toutes les versions d\u2019Android.</p> <p></p> <p>ActionBarCompat sur mon Nexus One (Gingerbread)</p> <p>Les menu items dans l\u2019Options Menu peuvent \u00eatre rendus disponibles dans les boutons d\u2019action. Il suffit juste d\u2019ajouter l\u2019attribut suivant aux items dans votre menu.xml :</p> <pre><code>    android:showAsAction=\"ifRoom|withText\";\n</code></pre>"},{"location":"blog/paris-android-dev-lab/#les-fragments","title":"Les fragments","text":"<p>Sans trop rentrer dans les d\u00e9tails : les fragments sont des composants de UI, r\u00e9utilisables. L\u2019utilisation de Fragment permet de repenser la UI, il ne suffit plus de se contenter d\u2019avoir un design fluide qui s\u2019\u00e9largit par rapport \u00e0 la taille de l\u2019\u00e9cran, il faut organiser les fragments diff\u00e9rents suivant l\u2019\u00e9cran et la place disponible.</p> <p>Pour \u00eatre tout \u00e0 fait honn\u00eate, je ne suis qu\u2019\u00e0 moiti\u00e9 convaincu par ce nouveau syst\u00e8me de fragment. Le principe reste proche de celui des activit\u00e9s : il s\u2019agit d\u2019un controller, charg\u00e9 d\u2019orchestrer le code m\u00e9tier li\u00e9 \u00e0 un assemblage de composants graphiques (des View).</p> <p></p> <p>En soit, ce n\u2019est pas une mauvaise id\u00e9e. Par contre, on se retrouve encore avec un mod\u00e8le par h\u00e9ritage, comme pour les activit\u00e9s. Tout fragment doit h\u00e9riter de Fragment. Il existe un ListFragment, un XXXFragment, etc, qui tous h\u00e9ritent de Fragment.</p> <p>Le probl\u00e8me, c\u2019est que d\u00e8s lors que l\u2019on souhaite factoriser du code commun \u00e0 plusieurs Fragments, il va falloir recr\u00e9er une sous classe pour chacun des types de Fragment. AbstractCustomFragment, AbstractCustomListFragment, etc. Et \u00e9videmment, si deux frameworks s\u2019amusent \u00e0 cr\u00e9er leurs propres fragments \u00e0 \u00e9tendre, il devient compliqu\u00e9 de les combiner.</p> <p></p> <p>Pour faire un parall\u00e8le, j\u2019ai l\u2019impression que l\u2019\u00e9quipe Android persiste \u00e0 proposer des servlets, quand il serait bien plus utile de proposer des controllers Spring.</p> <p>A bien y r\u00e9fl\u00e9chir, une Activity et un Fragment ont ceci de commun qu\u2019ils r\u00e9pondent \u00e0 des \u00e9v\u00e8nements (principe des callbacks type onCreate()), qu\u2019ils renvoient des \u00e9l\u00e9ments de configuration (e.g. getLastNonConfigurationInstance()), et qu\u2019ils fournissent des helpers (getLoaderManager(), getPreferences(), etc).</p> <p>Pour moi, ces diff\u00e9rentes responsabilit\u00e9s devraient appartenir \u00e0 diff\u00e9rents composants.</p>"},{"location":"blog/paris-android-dev-lab/#les-loaders","title":"Les Loaders","text":"<p>Les Loaders sont un nouveau moyen pour r\u00e9cup\u00e9rer des donn\u00e9es en t\u00e2che de fond, en g\u00e9rant convenablement les probl\u00e9matiques li\u00e9es au cycle de vie des composants Android.</p> <p></p> <p>Samsung loader, by A1C Beatrice Cassetty, U.S. Air Force (public domain)</p> <p>C\u2019est une alternative tr\u00e8s int\u00e9ressante \u00e0 l\u2019AsyncTask, qui malgr\u00e9 plusieurs bonnes id\u00e9es souffre de quelques probl\u00e8mes :</p> <ul> <li> <p>Pas de gestion du cycle de vie (activit\u00e9 mise en pause, d\u00e9truite d\u00e9finitivement, d\u00e9truite mais pour raison de changement de configuration, etc)</p> </li> <li> <p>Pas facile \u00e0 utiliser : le param\u00e8tre g\u00e9n\u00e9rique PARAM n\u2019est pas vraiment utile (en plus, c\u2019est une vararg, quelle horreur !), il n\u2019y a pas de gestion des exceptions.</p> </li> </ul> <p>A noter qu\u2019un des premiers risques avec les AsyncTask, c\u2019est d\u2019en faire des classes anonymes et de leaker des r\u00e9f\u00e9rences vers leur outer class, qui est bien souvent une activit\u00e9.</p> <p>Et pour simplifier votre code de gestion des Threads sur Android, pourquoi ne pas essayer @Background et @UiThread sur AndroidAnnotations ?</p>"},{"location":"blog/paris-android-dev-lab/#hardwareaccelerated","title":"hardwareAccelerated","text":"<p>Pensez \u00e0 activer le flag suivant dans votre manifest :</p> <pre><code>android:hardwareAccelerated=\"true\"\n</code></pre> <p>Cela permet de b\u00e9n\u00e9ficier de l\u2019acc\u00e9l\u00e9ration mat\u00e9rielle pour le rendering, gratos. Il est d\u00e9sactiv\u00e9 par d\u00e9faut car certaines impl\u00e9mentations dessinant via des canvas peuvent ralentir ou faire crasher votre appli.</p> <p>Ce n\u2019est normalement pas le cas des composants standards. Comment d\u00e9cider s\u2019il faut l\u2019utiliser ? C\u2019est simple :</p> <ul> <li> <p>Activez hardwareAccelerated</p> </li> <li> <p>Testez votre application sur Honeycomb. Si elle ne plante pas, c\u2019est bon, vous pouvez dormir tranquille!</p> </li> </ul>"},{"location":"blog/paris-android-dev-lab/#renderscript","title":"Renderscript","text":"<p>Renderscript est une nouvelle API C permettant de faire du 3D rendering haute performance. Nouvelle\u2026 pas tant que \u00e7a! Si j\u2019ai bonne m\u00e9moire, Romain Guy nous pr\u00e9sentait d\u00e9j\u00e0 Renderscript au pr\u00e9c\u00e9dent Android Dev Lab, il y a de cela deux ans. Bon, il est vrai que l\u2019API n\u2019a probablement plus rien \u00e0 voir (initialement, \u00e7a n\u2019\u00e9tait m\u00eame pas du C), seul le concept reste identique.</p> <p>Les applications Google Books et YouTube utilisent renderscript : Google Books pour tourner les pages, et YouTube pour l\u2019\u00e9cran avec toutes les vid\u00e9os visibles en m\u00eame temps.</p> <p></p>"},{"location":"blog/paris-android-dev-lab/#developpement-pour-tablettes-quelques-regles-simples","title":"D\u00e9veloppement pour tablettes, quelques r\u00e8gles simples","text":"<ul> <li>Mesurer en dp plut\u00f4t qu\u2019en pixels</li> <li>Utiliser des layouts extensibles    </li> <li>Centraliser les dimensions dans dimens.xml, de fa\u00e7on \u00e0 pouvoir les overrider gr\u00e2ce au m\u00e9canisme de ressources</li> <li>Supporter le mode paysage et ne pas bloquer en mode portrait. N\u2019oubliez pas que la mani\u00e8re d\u2019utiliser une tablette est essentiellement en paysage. Beaucoup d\u2019application ont un \u00e9cran de chargement de l\u2019application en portrait, ce n\u2019est pas tr\u00e8s malin !</li> </ul>"},{"location":"blog/paris-android-dev-lab/#mettre-a-jour-votre-application-pour-honeycomb","title":"Mettre \u00e0 jour votre application pour Honeycomb","text":"<ul> <li> <p>Ajoutez des graphiques pour les hautes r\u00e9solutions (xhdpi)</p> </li> <li> <p>Utilisez des fragments, m\u00eame pour les anciennes versions d\u2019Android (gr\u00e2ce \u00e0 la compatibility library)</p> </li> <li> <p>N\u2019oubliez pas d\u2019ajouter <code>&lt;uses-sdk android:targetSdkVersion=\"14\" /&gt;</code> dans votre manifest, notamment pour b\u00e9n\u00e9ficier automatique de la nouvelle Action bar sur Honeycomb</p> </li> </ul> <p>Voil\u00e0 qui conclu la premi\u00e8re moiti\u00e9 de ce compte rendu sur l\u2019Android Dev Lab, je vous conterai la fin de cette journ\u00e9e lors du prochain article.</p> <p>Edit: en fait, il n\u2019y a jamais eu de prochain article :)</p>"},{"location":"blog/paris-android-dev-lab/#comments","title":"Comments","text":""},{"location":"blog/paris-android-dev-lab/#frank-harper-franklinharper","title":"Frank Harper (@franklinharper)","text":"<p>Tout \u00e0 fait d\u2019accord quand tu soulignes la p\u00e9nibilit\u00e9 de sous classer chacun des types de Fragment/Activity! J\u2019esp\u00e9rais qu\u2019une solution plus \u00e9l\u00e9gante allait appara\u00eetre avec Android 4.0.</p> <p>Pour activer l\u2019Action bar un targetSdkVersion=\u201d11\u2033 devrait suffire; mais si on peut tester avec ICS pourquoi pas aller directement en targetSdkVersion=\u201d14\u2033!</p>"},{"location":"blog/quand-mamie-craque-du-wifi/","title":"Quand mamie craque du wifi","text":"<p>  [ | September 23, 2011]  </p> <p>Imaginons que vous ayez besoin de craquer le mot de passe de votre propre r\u00e9seau Wifi, prot\u00e9g\u00e9 par une cl\u00e9 WEP. Je parle bien de votre propre r\u00e9seau Wifi, car je suis s\u00fbr qu\u2019il ne vous viendrait jamais \u00e0 l\u2019id\u00e9e de craquer l\u2019acc\u00e8s de votre voisin, sachant que c\u2019est totalement ill\u00e9gal. </p> <p>Craquer une cl\u00e9 WEP peut \u00eatre l\u2019affaire de quelques minutes, et pourtant, aujourd\u2019hui encore, de tr\u00e8s nombreux r\u00e9seaux Wifi de particuliers sont prot\u00e9g\u00e9s par WEP. M\u00eame le New York Times en parle. Faites passer le mot, il faut que cela change.</p> <p>Les techniques pour y parvenir se sont consid\u00e9rablement am\u00e9lior\u00e9es ces derni\u00e8res ann\u00e9es. Parall\u00e8lement \u00e0 ces techniques, c\u2019est aussi leur facilit\u00e9 de mise en \u0153uvre qui a formidablement \u00e9volu\u00e9.</p> <p>Aujourd\u2019hui, quelques clics suffisent : m\u00eame mamie peut craquer du Wifi, et c\u2019est l\u2019objet de cet article.</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#mise-en-place","title":"Mise en place","text":""},{"location":"blog/quand-mamie-craque-du-wifi/#matos","title":"Matos","text":"<p>En termes de mat\u00e9riel, une carte Wifi suffit. La plupart des cartes conviennent et disposent aujourd\u2019hui de drivers adapt\u00e9s.</p> <p>Vous obtiendrez de tr\u00e8s bons r\u00e9sultats avec l\u2019Alfa AWUS036H, a priori la carte la plus puissante du march\u00e9 (1000mW). Attention par contre, il me semble qu\u2019elle est interdite \u00e0 la vente en France, effet micro onde garanti ;-).</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#os","title":"OS","text":"<p>Les drivers patch\u00e9s pour le crack Wifi sont essentiellement disponibles sous Linux. Plus pr\u00e9cis\u00e9ment, la distribution Backtrack contient tout le n\u00e9cessaire. Elle est disponible en Live CD et en Live USB.</p> <p>Version mamie : vous trouvez une cl\u00e9 USB avec quelques gigas de libres ; vous suivez ce tutoriel ; vous branchez la cl\u00e9 USB ; et vous red\u00e9marrez pour booter sur la cl\u00e9 USB (cf. ce tutoriel &gt; Modifier l\u2019ordre de boot).</p> <p>Backtrack d\u00e9marre, se logue tout seul, et pr\u00e9sente une ligne de commande une fois d\u00e9marr\u00e9.</p> <p>Il suffit de taper startx pour lancer l\u2019environnement graphique. </p> <p><pre><code>root@root:~# startx\n</code></pre> Notez que le layout de clavier \u00e9tant par d\u00e9faut un qwerty, il vous faudra probablement taper stqrtx.</p> <p>Une fois l\u2019environnement graphique d\u00e9marr\u00e9, vous pouvez changer le layout de clavier dans System &gt; Preferences &gt; Keyboard &gt; Layouts.</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#wifite-a-un-clic-du-crack","title":"Wifite : \u00e0 un clic du crack","text":"<p>Le plus dur est fait ! Il ne vous reste plus qu\u2019\u00e0 r\u00e9cup\u00e9rer Wifite et le lancer.</p> <p>T\u00e9l\u00e9chargez le script python \u00e0 cette adresse : http://wifite.googlecode.com/svn/trunk/wifite.py.</p> <p>Rendez-le ex\u00e9cutable : chmod +x ; ou bien clic-droit sur le fichier, s\u00e9lectionnez Properties &gt; Permissions et cochez z Execute: Allow executing file as program.</p> <p>Ex\u00e9cutez le script (double clic sur le fichier &gt; Run).</p> <p>Et hop, une bonne grosse interface \u00e0 la clicouille :</p> <p></p> <p>S\u00e9lectionnez l\u2019interface r\u00e9seau \u00e0 utiliser (en g\u00e9n\u00e9ral, il n\u2019y en a qu\u2019une). \u00c9tant donn\u00e9 que l\u2019on s\u2019int\u00e9resse ici au WEP, vous pouvez s\u00e9lectionner uniquement WEP dans encryption type.</p> <p>De nombreux param\u00e8tres sont disponibles, mais pour mamie, il suffit de cliquer sur h4x0r 1t n40, et d\u2019aller prendre une tisane.</p> <p></p> <p>Wifite se charge de tout, et note les mots de passe crack\u00e9s dans le fichier log.txt cr\u00e9\u00e9 \u00e0 c\u00f4t\u00e9 du script wifite.py.</p> <p></p> <p>Bingo !</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#comments","title":"Comments","text":""},{"location":"blog/quand-mamie-craque-du-wifi/#remi","title":"R\u00e9mi","text":"<p>J\u2019attendais avec impatience que quelqu\u2019un fasse ce travail! Tr\u00e8s int\u00e9ressant en tout cas. Je me permets de m\u2019abonner \u00e0 ton flux RSS du coup.</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#piwai","title":"Piwa\u00ef","text":"<p>Je t\u2019y autorise avec plaisir</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#bastien","title":"Bastien","text":"<p>C\u2019est un peu dommage, du coup \u00e7a devient une boite noire \u00e0 la IIS. On clique sur un bouton et \u00e7a fait tout, mais on sait pas vraiment ce que \u00e7a fait. Les plus int\u00e9ress\u00e9s devraient plut\u00f4t se tourner vers aerodump et cie, avec masse de tutos qui explique ce que \u00e7a fait, les diff\u00e9rentes attaques etc.</p>"},{"location":"blog/quand-mamie-craque-du-wifi/#piwai_1","title":"Piwa\u00ef","text":"<p>Certes, mais Mamie n\u2019en a rien \u00e0 carrer de comprendre ce que \u00e7a fait ;-). Elle veut juste craquer son Wifi, elle est comme \u00e7a Mamie.</p>"},{"location":"blog/renaming-android-manifest-package/","title":"Renaming android manifest package","text":"<p>  [ | December 20, 2012]  </p> <p>I recently needed to be able to change the package name of an app at build time. This is a common need when you have a paid and a free version of an app. It\u2019s also useful if you want to be able to install multiple versions of an app on your phone, such as a \u201cdev\u201d and a \u201cstable\u201d build.</p> <p>One way to do it is to transform the whole project as a library project, and then create one final project for each version, that depends on the library project.</p>"},{"location":"blog/renaming-android-manifest-package/#aapt-magic","title":"Aapt magic","text":"<p>There is another way: aapt has a <code>--rename-manifest-package</code> parameter that rewrites the package name of the binary <code>AndroidManifest.xml</code> file in the final APK.</p> <p>Here is what aapt help says:</p> <pre><code>   --rename-manifest-package\n       Rewrite the manifest so that its package name is the package name\n       given here.  Relative class names (for example .Foo) will be\n       changed to absolute names with the old package so that the code\n       does not need to change.\n</code></pre> <p>The great advantage is that your code won\u2019t change, the R class stays identical.</p>"},{"location":"blog/renaming-android-manifest-package/#ant","title":"Ant","text":"<p>Since r17, this option is available in the aapt Ant task, through the <code>manifestpackage</code> attribute. You\u2019ll need to override the <code>-package-resources</code> target, copied from the SDK <code>build.xml</code>:</p> <pre><code>&lt;target name=\"-package-resources\" depends=\"-crunch\"&gt;\n&lt;do-only-if-not-library elseText=\"Library project: do not package resources...\" &gt;\n&lt;aapt executable=\"${aapt}\"\nmanifestpackage=\"com.my.package\"\n&gt;\n...\n    &lt;/aapt&gt;\n&lt;/do-only-if-not-library&gt;\n&lt;/target&gt;\n</code></pre>"},{"location":"blog/renaming-android-manifest-package/#maven","title":"Maven","text":"<p>The <code>android:apk</code> goal of the android-maven-plugin has a renameManifestPackage parameter.</p>"},{"location":"blog/renaming-android-manifest-package/#one-last-thing","title":"One last thing","text":"<p>If you load some resource ids at runtime, you may need to update your code.</p> <p>I used to do this:</p> <pre><code>String packageName = context.getPackageName();\nResources res = context.getResources();\nint id = res.getIdentifier(\"my_drawable\", \"drawable\", packageName);\n</code></pre> <p>This usually works great, especially in library projects where you do not know the package name.</p> <p>However, the problem here is that the resources were processed before the package name was finally updated. So <code>packageName</code> is wrong.</p> <p>It\u2019s easy to fix though, by retrieving the package name of another resource with <code>Resources.getResourcePackageName()</code>.</p> <p>Let\u2019s create a resource id dedicated to that purpose, for example in <code>res/values/ids.xml</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n&lt;item name=\"used_for_package_name_retrieval\" type=\"id\"/&gt;\n&lt;/resources&gt;\n</code></pre> <p>And now we get the right package:</p> <pre><code>Resources res = context.getResources();\nString packageName = res.getResourcePackageName(R.id.used_for_package_name_retrieval);\nint id = res.getIdentifier(\"some_drawable\", \"drawable\", packageName);\n</code></pre>"},{"location":"blog/renaming-android-manifest-package/#conclusion","title":"Conclusion","text":"<p>This tip helps creating different versions of the same app. </p> <p></p> <p>As you can see on this screenshot, the package name can then be set as a build parameter, to create parameterized builds in Jenkins.</p>"},{"location":"blog/renaming-android-manifest-package/#comments","title":"Comments","text":""},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/","title":"Roooh jai encore oublie ma branche git","text":"<p>  [ | October 9, 2011]  </p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#introduction","title":"Introduction","text":"<p>La startup pour laquelle je bosse depuis peu h\u00e9berge son code source sur GitHub, et \u00e7a, c\u2019est carr\u00e9ment cool.</p> <p>En plus, nous sommes r\u00e9cemment pass\u00e9 d\u2019un workflow old school (tout le monde commit comme des sauvages sur la m\u00eame branche) \u00e0 un workflow de type feature branching. Encore plus cool !</p> <p>Le merge d\u2019une feature branch sur la branche d\u2019int\u00e9gration ne se fait qu\u2019apr\u00e8s validation (revue de code et tests fonctionnels) par quelqu\u2019un qui n\u2019a pas d\u00e9velopp\u00e9 la feature. Dans cette optique, les pull requests de GitHub se r\u00e9v\u00e8lent particuli\u00e8rement pratiques.</p> <p></p> <p>Mais tr\u00eave de bavardage, venons-en \u00e0 l\u2019objet de cet article.</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#roooh-jai-encore-oublie-ma-branche-git","title":"Roooh, j\u2019ai encore oubli\u00e9 ma branche Git !","text":"<p>Avec le feature branching, on se retrouve \u00e0 changer fr\u00e9quemment de branche.</p> <p>Du coup, j\u2019ai tendance \u00e0 ne plus savoir sur quelle branche je me trouve, ou encore \u00e0 oublier le nom pr\u00e9cis de la branche, et \u00e0 taper <code>git branch</code> toutes les trois commandes.</p> <p>Un membre de l\u2019\u00e9quipe nous a envoy\u00e9 un script plut\u00f4t pratique, qui ajoute le nom de la branche en cours au prompt de votre terminal :</p> <p></p> <p>Le petit truc cool en plus, c\u2019est que le nom s\u2019affiche en rouge si vous avez des modifications locales (dirty working tree), et en vert dans le cas contraire.</p> <p>Instructions \u00e0 ajouter \u00e0 votre fichier ~/.bashrc (ou ~/.profile sur Mac) :</p> <pre><code># git branch name in prompt\nc_red=`tput setaf 1`\nc_green=`tput setaf 2`\nc_sgr0=`tput sgr0`\nparse_git_branch () {\nif git rev-parse --git-dir &gt;/dev/null 2&gt;&amp;1\nthen\ngitver=$(git branch 2&gt;/dev/null| sed -n '/^\\*/s/^\\* //p')\nelse\nreturn 0\nfi\necho -e \"($gitver) \"\n}\nbranch_color () {\nif git rev-parse --git-dir &gt;/dev/null 2&gt;&amp;1\nthen\ncolor=\"\"\nif git diff --quiet 2&gt;/dev/null &gt;&amp;2\nthen\ncolor=\"${c_green}\"\nelse\ncolor=${c_red}\nfi\nelse\nreturn 0\nfi\necho -ne $color\n}\nPS1=\"\\[\\$(branch_color)\\]\\$(parse_git_branch)\\[$(tput sgr0)\\]$PS1\"\n</code></pre> <p>Dans le m\u00eame ordre d\u2019id\u00e9e, voici un article bien pratique pour disposer de l\u2019autocompl\u00e9tion des noms de branches.</p> <p>\u00c0 vous, partagez vos astuces ;-) !</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#comments","title":"Comments","text":""},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#olivier-bazoud","title":"Olivier Bazoud","text":"<p>Je pr\u00e9f\u00e8re utiliser celui ci livr\u00e9 par Git, utiliser la variable __git_ps1 et en plus \u00e7a g\u00e8re beaucoup plus de cas (modifications locales, fichier non trackes, stash, uptream, commit locaux, commits remote, \u2026)</p> <p>Dans mon ~/.bashrc:</p> <pre><code>if [ -f /etc/bash_completion.d/git ]; then\n. /etc/bash_completion.d/git\nfi\nGIT_PS1_SHOWDIRTYSTATE=true\nGIT_PS1_SHOWSTASHSTATE=true\nGIT_PS1_SHOWUNTRACKEDFILES=true\nGIT_PS1_SHOWUPSTREAM=\"verbose\"\nPS1='\\A [${debian_chroot:+($debian_chroot)}\\[33[01;32m\\]\\u@\\[33[0;33m\\]\\h\\[33[00m\\]]\\[33[01;31m\\]$(__git_ps1)\\[33[00m\\]% '\n</code></pre> <p>@obazoud</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#piwai","title":"Piwa\u00ef","text":"<p>Merci Olivier, j\u2019avais d\u00e9couvert bash_completion.d dans l\u2019article cit\u00e9 plus haut, mais je n\u2019avais pas test\u00e9 la partie modification du PS1.</p> <p>Je m\u2019en vais essayer \u00e7a de ce pas !</p> <p>PS : je me suis permis d\u2019ajouter la coloration syntaxique \u00e0 ton commentaire ;).</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#sam-bessalah-samklr","title":"Sam Bessalah (@samklr)","text":"<p>Ou bien tu peux utiliser oh-my-zsh, qui prend en compte git nativement et t\u2019averti dans quelle branche tu te trouves, etc .. En tout cas impossible d\u2019utiliser le shell sans, pour moi.</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#piwai_1","title":"Piwa\u00ef","text":"<p>@Olivier : apr\u00e8s avoir test\u00e9, c\u2019est effectivement pas mal mais il manque la couleur :).</p> <p>@Sam : depuis le temps qu\u2019un de mes potes me bassine avec ZSH, je crois que c\u2019est l\u2019occasion de tester :).</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#sam-bessalah-samklr_1","title":"Sam Bessalah (@samklr)","text":"<p>Tu devrais, j\u2019\u00e9tais dubitatif moi aussi, mais l\u00e0 c\u00f4t\u00e9 productivit\u00e9 on fais pas mieux. :)</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#piwai_2","title":"Piwa\u00ef","text":"<p>Merci Sam, \u00e7a fait \u00e0 peine 40 minutes, je sais que j\u2019ai d\u00e9j\u00e0 switch\u00e9 d\u00e9finitivement vers ZSH :). oh-my-zsh est magique, et les themes dispos sont bien sympas :).</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#hugoch","title":"hugoch","text":"<p>Ah c\u2019est assez niquel ! Merci pour l\u2019astuce. A quand un article sur zsh du coup ?!</p>"},{"location":"blog/roooh-jai-encore-oublie-ma-branche-git/#piwai_3","title":"Piwa\u00ef","text":"<p>Oh, pas vraiment besoin d\u2019un article, en gros \u00e7a marche comme bash mais en mieux, et il suffit de suivre les instructions du lien donn\u00e9 par @samklr pour d\u00e9marrer ;).</p>"},{"location":"blog/sexy-dialogs-huhu/","title":"Sexy dialogs huhu","text":"<p>  [ | October 23, 2011]  </p>"},{"location":"blog/sexy-dialogs-huhu/#introduction","title":"Introduction","text":"<p>On reproche souvent aux applications Android d\u2019\u00eatre\u2026 moches. Et ce serait la faute du framework Android, qui fournirait des composants qui n\u2019ont pas la Apple sexy touch. Peut-\u00eatre est-ce le cas, mais faudrait voir \u00e0 ne pas \u00eatre trop paresseux.</p> <p>Prenons le cas des bo\u00eetes de dialogue. A priori, il n\u2019y a rien de plus ennuyeux, et rien ne ressemble plus \u00e0 une bo\u00eete de dialogue\u2026 qu\u2019une autre bo\u00eete de dialogue. Sauf si vous d\u00e9cidez de changer leur style graphique, ce qui risque d\u2019une part de perdre vos utilisateurs, et d\u2019autre part de vous demander du boulot.</p> <p>Je vous propose d\u2019aborder quelques techniques simples pour donner un peu de vie \u00e0 vos bo\u00eetes de dialogues, sans trop vous fatiguer.</p>"},{"location":"blog/sexy-dialogs-huhu/#dialogue-fadasse","title":"Dialogue fadasse","text":"<p>Voici un exemple classique de bo\u00eete de dialogue :</p> <pre><code>new AlertDialog.Builder(this)\n.setMessage(\"Un message pas sexy\")\n.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\npublic void onClick(DialogInterface dialog, int which) {\n// Do something\n}\n})\n.show();\n</code></pre> <p>Je pr\u00e9f\u00e8re cr\u00e9er et g\u00e9rer manuellement mes bo\u00eetes de dialogue plut\u00f4t qu\u2019utiliser <code>showDialog()</code> et <code>onCreateDialog()</code>, que je n\u2019ai jamais r\u00e9ussi \u00e0 utiliser correctement d\u00e8s que les cas d\u2019utilisation se corsent.</p> <p></p>"},{"location":"blog/sexy-dialogs-huhu/#une-vue-custom","title":"Une vue custom","text":"<p>Je vous propose de personnaliser le message affich\u00e9 par notre bo\u00eete de dialogue. Plut\u00f4t que <code>setMessage()</code>, il suffit d\u2019appeller <code>setView()</code>, qui prend en param\u00e8tre n\u2019importe quel type de <code>View</code>.</p> <p>Par exemple une <code>TextView</code>, d\u00e9finie ici dans un <code>layout</code> :</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;TextView\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:textSize=\"30sp\"\nandroid:padding=\"20dp\"\n/&gt;\n</code></pre> <p>Petit rappel, vos layouts xml n\u2019ont aucune raison de commencer syst\u00e9matiquement par un <code>LinearLayout</code> ou un <code>RelativeLayout</code>.</p> <p>Ensuite, il suffit de gonfler (inflate ;)) ce <code>layout</code>, et de le d\u00e9finir comme vue de la bo\u00eete de dialogue :</p> <pre><code>TextView messageView = (TextView) View.inflate(this, R.layout.dialog, null);\nmessageView.setText(\"Un message \u00e0 peine plus sexy\");\nnew AlertDialog.Builder(this) //\n.setView(messageView) //\n.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n@Override\npublic void onClick(DialogInterface dialog, int which) {\n// Do something\n}\n}) //\n.show();\n</code></pre> <p>Notez l\u2019utilisation de <code>View.inflate()</code>, plut\u00f4t que <code>LayoutInflater.from(context).inflate()</code>, ou encore pire, <code>((LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate()</code></p> <p>Et voil\u00e0 le travail :</p> <p></p>"},{"location":"blog/sexy-dialogs-huhu/#un-peu-de-style","title":"Un peu de style","text":"<p>Dans un pr\u00e9c\u00e9dent article, nous avons d\u00e9couvert <code>Html.fromHtml()</code> qui se marie tr\u00e8s bien avec une <code>TextView</code>. Mettons-le \u00e0 profit :</p> <pre><code>TextView messageView = (TextView) View.inflate(this, R.layout.dialog, null);\nCharSequence message = Html.fromHtml(\"I like &lt;b&gt;sexy&lt;/b&gt; &lt;font color=\\\"#42dd42\\\"&gt;turtles&lt;/font&gt;!\");\nmessageView.setText(message);\n</code></pre> <p></p> <p>\u00c9videmment, c\u2019est mieux avec l\u2019i18n, ajoutons donc une entr\u00e9e \u00e0 strings.xml :</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;!-- ... --&gt;\n&lt;string name=\"dialog_message\"&gt;&lt;![CDATA[I like &lt;b&gt;sexy&lt;/b&gt; &lt;font color=\"#42dd42\"&gt;turtles&lt;/font&gt;!\"]]&gt;&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <p>Et notre code devient :</p> <pre><code>CharSequence message = Html.fromHtml(getString(R.string.dialog_message));\n</code></pre>"},{"location":"blog/sexy-dialogs-huhu/#et-avec-une-photo-sexy","title":"Et avec une photo sexy ?","text":"<p>Saviez-vous que <code>Html.fromHtml()</code> supporte la balise <code>img</code>, et permet de charger des images locales, gr\u00e2ce \u00e0 un ImageGetter ? </p> <p>Ajoutons une image \u00e0 notre message :</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;!-- ... --&gt;\n&lt;string name=\"dialog_message\"&gt;&lt;![CDATA[I like &lt;img src=\"turtle\" /&gt; &lt;b&gt;sexy&lt;/b&gt; &lt;font color=\\\"#42dd42\\\"&gt;turtles&lt;/font&gt;!\"]]&gt;&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre> <p>Ainsi que la ressource correspondante :</p> <p></p> <p>Il n\u2019y a plus qu\u2019\u00e0 cr\u00e9er un <code>ImageGetter</code> qui sait charger un <code>Drawable</code> \u00e0 partir de son nom de ressource :</p> <pre><code>ImageGetter imageGetter = new ImageGetter() {\n@Override\npublic Drawable getDrawable(String source) {\nString name = source.replace(\"/\", \"\");\nResources resources = getResources();\nint drawableId = resources.getIdentifier(name, \"drawable\", getPackageName());\nif (drawableId != 0) {\nDrawable drawable = resources.getDrawable(drawableId);\ndrawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\nreturn drawable;\n} else {\nreturn null;\n}\n}\n};\nCharSequence message = Html.fromHtml(getString(R.string.dialog_message), imageGetter, null);\n</code></pre> <p>Et le tour est jou\u00e9 :</p> <p></p> <p>turtle\u2019s head by Betta.1</p>"},{"location":"blog/sexy-dialogs-huhu/#conclusion","title":"Conclusion","text":"<p>Ces quelques lignes de code permettent de rapidement mettre en avant les informations importantes au sein d\u2019une bo\u00eete de dialogue, sans pour autant d\u00e9stabiliser l\u2019utilisateur.</p> <p>Bien entendu, l\u2019abus de bo\u00eete de dialogues est dangereux pour la sant\u00e9 mentale des utilisateurs, \u00e0 afficher avec mod\u00e9ration !</p>"},{"location":"blog/sexy-dialogs-huhu/#comments","title":"Comments","text":""},{"location":"blog/square-cash-mailto/","title":"Square cash mailto","text":"<p>  [ | October 17, 2013]  </p> <p>This week, Square introduced Square Cash, a new service that lets you send money to your friends through email.</p> <p>To use it, just send your friend an email with the amount in the subject and Cc cash@square.com.</p> <p>That\u2019s it, you don\u2019t need to install any new app, go through a painful signup process, or use a specific email provider.</p> <p>It\u2019s free, simple, secure.</p> <p>Here is a trick I\u2019d like to share with you: you can make it even simpler for friends who owe you money by sending them a mailto link. Then, they just need to click on the link to open their favorite email app and send that worthy email.</p> <pre><code>&lt;a href=\"mailto:your@email.com?subject=$1&amp;amp;cc=cash@square.com\"&gt;Send me money!&lt;/a&gt;\n</code></pre> <p> Send me money!</p> <p>I think that\u2019s a pretty cool way to collect money from your friends :) .</p> <p>Side note: as of now, Square Cash only works in the US.</p>"},{"location":"blog/tas-mis-a-jour-les-specs/","title":"Tas mis a jour les specs","text":"<p>  [ | October 14, 2011]  </p>"},{"location":"blog/tas-mis-a-jour-les-specs/#introduction","title":"Introduction","text":"<p>Il est g\u00e9n\u00e9ralement admis qu\u2019utiliser un syst\u00e8me de gestion de version (d\u00e9centralis\u00e9 de pr\u00e9f\u00e9rence) pour le code d\u2019un projet est une bonne chose.</p> <p>Mais qu\u2019en est-il des documents de sp\u00e9cifications fonctionnelles et techniques ? Loin de l\u2019approche monolithique du cycle en V, les adeptes des m\u00e9thodes agiles ont \u00e0 coeur de faire \u00e9voluer ces documents tr\u00e8s fr\u00e9quemment. D\u2019aucuns pourraient penser que les posts-it de Scrum remplacent avantageusement tout document de sp\u00e9cification\u2026</p> <p></p> <p>Archaeological post-it label by Evelyn Simak</p>"},{"location":"blog/tas-mis-a-jour-les-specs/#versionner-les-specifications","title":"Versionner les sp\u00e9cifications","text":"<p>N\u2019oubliez pas, \u00eatre agile ne constitue pas une excuse pour ne pas \u00e9crire de documentation. Pareil pour le design \u00e9mergeant. Bien au contraire, il est d\u2019autant plus important de consigner et conserver le savoir fonctionnel et technique.</p> <p></p> <p>Steacie Science and Engineering Library at York University, by Raysonho@Open Grid Scheduler</p> <p>Vous qui posez un tag sur votre code dans votre syst\u00e8me de gestion de version (VCS) lors d\u2019une nouvelle release, \u00eates-vous capables de retrouver plus tard les sp\u00e9cifications fonctionnelles et techniques correspondant \u00e0 cette release ?</p> <p></p> <p>Un moyen simple pour y parvenir est d\u2019h\u00e9berger ces documents dans le m\u00eame VCS que le code. Ainsi, tout tag/branche contiendra automatiquement la bonne version des sp\u00e9cifications.</p>"},{"location":"blog/tas-mis-a-jour-les-specs/#diff-de-specs","title":"Diff de specs ?","text":"<p>Allons plus loin : un VCS n\u2019a pas pour seul but de conserver l\u2019historique d\u2019un projet ; il permet aussi d\u2019appr\u00e9hender les changements r\u00e9alis\u00e9s, gr\u00e2ce aux outils de diff. C\u2019est \u00e9videmment essentiel pour assembler le travail parall\u00e8le des diff\u00e9rents d\u00e9veloppeurs, pour comprendre l\u2019origine d\u2019un bug, pour toute revue de code, etc.</p> <p>Le probl\u00e8me des outils de diff est qu\u2019ils fonctionnent tr\u00e8s bien pour tout ce qui est textuel, et beaucoup moins bien lorsqu\u2019ils ont affaire \u00e0 des fichiers binaires. Malheureusement, les documents de sp\u00e9cifications sont bien souvent des fichiers Word ou LibreOffice, qui entrent dans cette cat\u00e9gorie.</p> <p>Il existe pourtant un format textuel tout \u00e0 fait adapt\u00e9: Markdown. La syntaxe de ce langage est r\u00e9ellement accessible, m\u00eame pour les membres non techniques de votre \u00e9quipe :</p> <pre><code># Titre du document\n## Mon sous titre\n\nUn paragraphe contenant un [lien absolu](http://www.google.com), un\n[lien relatif](../autrePage), et une ![image](image.png).\n\n* une liste \u00e0 puces\n* avec une sous liste\n  * contenant un \u00e9l\u00e9ment *en italique*\n  * et un \u00e9l\u00e9ment **en gras**\n</code></pre> <p>De plus, les documents Markdown peuvent ais\u00e9ment \u00eatre visualis\u00e9s en HTML ou PDF, si vous ne disposez pas d\u2019un \u00e9diteur d\u00e9di\u00e9. Il existe m\u00eame des scripts pour convertir de l\u2019ODT en Markdown.</p> <p>Bref, vous n\u2019avez aucune excuse valable ;-).</p>"},{"location":"blog/tas-mis-a-jour-les-specs/#retour-dexperience","title":"Retour d\u2019exp\u00e9rience","text":"<p>Chez Siine, nous h\u00e9bergeons nos projets sur GitHub, et chaque User Story fait l\u2019objet d\u2019une branche d\u00e9di\u00e9e.</p> <p>Les sp\u00e9cifications fonctionnelles et techniques relatives \u00e0 une User Story sont \u00e9crites en Markdown, sur la branche d\u00e9di\u00e9e \u00e0 cette User Story. </p> <p>Lorsque la User Story est pr\u00eate \u00e0 \u00eatre int\u00e9gr\u00e9e sur la branche de d\u00e9veloppement, le d\u00e9veloppeur cr\u00e9e une pull request. Il suffit alors d\u2019ouvrir l\u2019onglet Diff de la pull request pour tout de suite identifier les changements fonctionnels et techniques introduits par cette User Story.</p> <p></p>"},{"location":"blog/tas-mis-a-jour-les-specs/#diagrammes","title":"Diagrammes","text":"<p>Tous les fichiers binaires ne peuvent pas forc\u00e9ment \u00eatre remplac\u00e9s par des fichiers textuels ; c\u2019est le cas des diagrammes techniques.</p> <p>A moins que\u2026 en \u00eates-vous si s\u00fbr ?</p> <p>websequencediagrams.com et yuml.me vous proposent d\u2019exprimer le contenu de vos diagrammes sous forme de texte, et se chargent de g\u00e9n\u00e9rer l\u2019image correspondante.</p>"},{"location":"blog/tas-mis-a-jour-les-specs/#websequencediagrams","title":"websequencediagrams","text":"<p>websequencediagrams permet de g\u00e9n\u00e9rer des diagrammes de s\u00e9quence, et offre m\u00eame le luxe de choisir le style utilis\u00e9.</p> <pre><code>UI-&gt;StuffManager: doSomeStuff()\nnote over StuffManager: HandlesStuff\nactivate StuffManager\nStuffManager-&gt;DataStore:gimmeDaStuff()\nactivate DataStore\nDataStore-&gt;StuffManager:\ndeactivate DataStore\nStuffManager-&gt;DataStore:updateDaStuff()\nactivate DataStore\nDataStore-&gt;StuffManager:\ndeactivate DataStore\nStuffManager--&gt;UI:\ndeactivate StuffManager\n</code></pre> <p></p>"},{"location":"blog/tas-mis-a-jour-les-specs/#yuml","title":"yUML","text":"<p>yUML permet de g\u00e9n\u00e9rer des diagrammes UML de classe, d\u2019activit\u00e9, et de cas d\u2019utilisation.</p> <pre><code>[Activity]^[MyActivity]\n[MyActivity]-[note: I like turtles!]\n[Step]^[FirstStep]\n[Step]^[SecondStep]\n[Step]^[FinalStep]\n[MyActivity]++-&gt;[StateHolder]\n[MyActivity]++-*&gt;[Step]\n[FirstStep]+-&gt;[StateHolder]\n[SecondStep]+-&gt;[StateHolder]\n</code></pre> <p></p> <p>Connaissez-vous d\u2019autres outils bien pratiques de ce type ?</p>"},{"location":"blog/tas-mis-a-jour-les-specs/#comments","title":"Comments","text":""},{"location":"blog/tas-mis-a-jour-les-specs/#maxime-sinclair","title":"Maxime Sinclair","text":"<p>Tout \u00e0 fait en ligne avec ton article. Ce qu\u2019il faut versionner, c\u2019est le produit logiciel. Et le logiciel ce n\u2019est pas juste du code, c\u2019est aussi l\u2019ensemble de la documentation associ\u00e9e (sp\u00e9cification, cahier de tests, manuel utilisateur,\u2026).</p> <p>Pour la documentation, il faut savoir que Word propose un mode diff\u00e9rentiel o\u00f9 il affiche les diff\u00e9rences sous la forme de marques de r\u00e9vision. Je me souviens que ceci marchait tr\u00e8s bien avec TortoiseSVN. En ce qui concerne les diagrammes, il y a PlantUML qui supporte tous les diagrammes UML mais aussi les diagrammes Ditaa, qui est aussi disponible en mode cloud et, ce qui ne g\u00e2te rien, qui est open source. Allez, un petit sudoku pour conclure.</p>"},{"location":"blog/tas-mis-a-jour-les-specs/#piwai","title":"Piwa\u00ef","text":"<p>Merci Maxime pour le compl\u00e9ment d\u2019info, je ne connaissais pas ces deux derniers !</p>"},{"location":"blog/transparent-jpegs-done-right/","title":"Transparent jpegs done right","text":"<p>  [ | April 23, 2013]  </p> <p>A few months ago, Square published a great article on Transparency with JPEGs on Android. It\u2019s definitely worth reading! Just don\u2019t use the provided code yet :) .</p> <p>Romain Guy suggested in the comments that you can do this in a much more efficient and simpler way, either by using a BitmapShader or by playing with Porter-Duff blending modes.</p> <p>Using a bitmap shader is great for dynamic masks. To apply a static mask to a bitmap loaded from a JPEG, Porter-Duff is the way to go, as we will see in this article.</p>"},{"location":"blog/transparent-jpegs-done-right/#principle","title":"Principle","text":"<p>We just need to load the bitmap, and then draw the mask on top of it with the right Porter-Duff mode.</p> <p>Here is what the Android documentation has to say about the different modes:</p> <ul> <li>ADD   Saturate(S + D)  </li> <li>CLEAR     [0, 0]  </li> <li>DARKEN    [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]  </li> <li>DST   [Da, Dc]  </li> <li>DST_ATOP  [Sa, Sa * Dc + Sc * (1 - Da)]  </li> <li>DST_IN    [Sa * Da, Sa * Dc]  </li> <li>DST_OUT   [Da * (1 - Sa), Dc * (1 - Sa)]  </li> <li>DST_OVER  [Sa + (1 - Sa)*Da, Rc = Dc + (1 - Da)*Sc]  </li> <li>LIGHTEN   [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]  </li> <li>MULTIPLY  [Sa * Da, Sc * Dc]  </li> <li>OVERLAY    </li> <li>SCREEN    [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]  </li> <li>SRC   [Sa, Sc]  </li> <li>SRC_ATOP  [Da, Sc * Da + (1 - Sa) * Dc]  </li> <li>SRC_IN    [Sa * Da, Sc * Da]  </li> <li>SRC_OUT   [Sa * (1 - Da), Sc * (1 - Da)]  </li> <li>SRC_OVER  [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]  </li> <li>XOR   [Sa + Da - 2 * Sa * Da, Sc * (1 - Da) + (1 - Sa) * Dc]</li> </ul> <p>Crystal clear! Hopefully the Xfermodes example in the API Demos demonstrates what the different modes do:</p> <p></p> <p>The yellow circle is the destination bitmap and the blue rectangle is the source bitmap. The destination is drawn normally, then the source is drawn on top of that using the given Porter-Duff mode.</p> <p>To apply the alpha mask, we will therefore use <code>DST_IN</code>.</p>"},{"location":"blog/transparent-jpegs-done-right/#applying-the-mask","title":"Applying the mask","text":"<p>Let\u2019s say we have a nice JPEG:</p> <p></p> <p>And a PNG that we want to use as a mask:</p> <p></p> <p>First, we load the bitmap: <pre><code>BitmapFactory.Options options = new BitmapFactory.Options();\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {\n// Starting with Honeycomb, we can load the bitmap as mutable.\noptions.inMutable = true;\n}\n// We could also use ARGB_4444, but not RGB_565 (we need an alpha layer).\noptions.inPreferredConfig = Bitmap.Config.ARGB_8888;\nResources res = getResources();\nBitmap source = BitmapFactory.decodeResource(res, R.drawable.golden_gate, options);\nBitmap bitmap;\nif (source.isMutable()) {\nbitmap = source;\n} else {\nbitmap = source.copy(Bitmap.Config.ARGB_8888, true);\nsource.recycle();\n}\n// The bitmap is opaque, we need to enable alpha compositing.\nbitmap.setHasAlpha(true);\n</code></pre></p> <p>Next we draw the mask on the bitmap with a canvas, using the <code>DST_IN</code> Porter-Duff mode: <pre><code>Canvas canvas = new Canvas(bitmap);\nBitmap mask = BitmapFactory.decodeResource(res, R.drawable.troll_face);\nPaint paint = new Paint();\npaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\ncanvas.drawBitmap(mask, 0, 0, paint);\n// We do not need the mask bitmap anymore.\nmask.recycle();\n</code></pre></p> <p>Finally we just use the bitmap: <pre><code>ImageView trollFace = (ImageView) findViewById(R.id.troll_face);\ntrollFace.setImageBitmap(bitmap);\n</code></pre></p>"},{"location":"blog/transparent-jpegs-done-right/#result","title":"Result","text":"<p>There you go, Troll Face Golden Gate! </p> <p>Here is a helper method to do this all at once: <pre><code>public static Bitmap getMaskedBitmap(Resources res, int sourceResId, int maskResId) {\nBitmapFactory.Options options = new BitmapFactory.Options();\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {\noptions.inMutable = true;\n}\noptions.inPreferredConfig = Bitmap.Config.ARGB_8888;\nBitmap source = BitmapFactory.decodeResource(res, sourceResId, options);\nBitmap bitmap;\nif (source.isMutable()) {\nbitmap = source;\n} else {\nbitmap = source.copy(Bitmap.Config.ARGB_8888, true);\nsource.recycle();\n}\nbitmap.setHasAlpha(true);\nCanvas canvas = new Canvas(bitmap);\nBitmap mask = BitmapFactory.decodeResource(res, maskResId);\nPaint paint = new Paint();\npaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));\ncanvas.drawBitmap(mask, 0, 0, paint);\nmask.recycle();\nreturn bitmap;\n}\n</code></pre></p>"},{"location":"blog/transparent-jpegs-done-right/#update","title":"Update","text":"<p>If you want to understand Porter-Duff blending modes in details, you should read this great article: Porter/Duff Compositing and Blend Modes (special thanks to Cyril Mottier for the link).</p>"},{"location":"blog/transparent-jpegs-done-right/#comments","title":"Comments","text":""},{"location":"blog/transparent-jpegs-done-right/#dreamingindroids","title":"DreamingInDroids","text":"<p>Brilliant! Thanks for the pictures demonstrating the different Porter-Duff modes! I had been wondering about them for a long time!</p>"},{"location":"blog/transparent-jpegs-done-right/#casey","title":"Casey","text":"<p>Very useful! I\u2019m writing a children\u2019s puzzle app and this is a quick and easy way to create a base (ie. a square with the puzzle shape cut out of it) for the puzzle with an interesting texture. Thanks =)</p>"},{"location":"blog/un-peu-de-style-dans-la-textview/","title":"Un peu de style dans la textview","text":"<p>  [ | October 1, 2011]  </p> <p>Les designers qui d\u00e9finissent les \u00e9crans de votre application Android se sont fait plaisir, et vous ont demand\u00e9 une mise en forme bien chiad\u00e9e pour les textes de votre application.</p> <p>Avant de vous jeter sur Photoshop pour cr\u00e9er des images correspondant au pixel pr\u00e8s \u00e0 ce qu\u2019ils attendent, pourquoi ne pas garder votre bonne vieille TextView ?</p> <p>Pour changer un peu des r\u00e9cents articles sur GWT, voici quelques petites astuces pour Android.</p>"},{"location":"blog/un-peu-de-style-dans-la-textview/#tweak-la-police","title":"Tweak la police","text":"<p>Par d\u00e9faut, Android ne propose que trois polices de caract\u00e8res pour les TextView : monospace, sans et serif.</p> <p>Toutefois, il est tout \u00e0 fait possible d\u2019utiliser votre police pr\u00e9f\u00e9r\u00e9e, \u00e0 condition de l\u2019embarquer dans votre application.</p> <p>Il suffit de copier la police dans le r\u00e9pertoire assets de votre projet Android, puis de la charger au Runtime :</p> <pre><code>@Override\nprotected void onCreate(Bundle savedInstanceState) {.\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nTextView myTextView = (TextView) findViewById(R.id.myTextView);\nTypeface myFont = Typeface.createFromAsset(getAssets(), \"MyFont.otf\");\nmyTextView.setTypeface(myFont);\n}\n</code></pre> <p>Il n\u2019est pas possible de le faire directement dans votre fichier de layout, sauf en cr\u00e9ant des composants alternatifs.</p>"},{"location":"blog/un-peu-de-style-dans-la-textview/#style","title":"Styl\u00e9 !","text":"<p>Votre texte doit comporter des morceaux en couleur, en italique\u2026 ; bref, il doit \u00eatre mis en forme.</p> <p>Avant d\u2019envisager la cr\u00e9ation d\u2019une TextView pour chaque morceau de texte diff\u00e9rent, jetez un oeil \u00e0 Spannable, et surtout \u00e0 son cousin germain Html.</p> <p>Html.fromHtml() retourne un Spanned, qui peut \u00eatre utilis\u00e9 pour d\u00e9finir le contenu d\u2019une TextView.</p> <p>Par exemple : <pre><code>Spanned spanned = Html.fromHtml(\"Hello &lt;b&gt;World&lt;/b&gt;!\")\nmyTextView.setText(spanned);\n</code></pre></p> <p>Bien entendu, une String en dur dans le code, c\u2019est moche (pas tr\u00e8s i18n).</p> <p>Pour y rem\u00e9dier, il suffit d\u2019encadrer dans un CDATA le texte contenant le markup Html, au sein de vos fichiers de ressources.</p> <p>Exemple de res/values/strings.xml : <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;resources&gt;\n&lt;string name=\"styled_content\"&gt;&lt;![CDATA[I like turtles!&lt;br /&gt;Hello &lt;font color=\"#99cc33\"&gt;&lt;b&gt;World&lt;/b&gt;&lt;/font&gt;!]]&gt;&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre></p> <p>Malheureusement, vous ne pouvez pas utiliser ces ressources directement dans vos fichiers de layout ; il faut en passer par du code Java : <pre><code>@Override\nprotected void onCreate(Bundle savedInstanceState) {.\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nTextView myTextView = (TextView) findViewById(R.id.myTextView);\nmyTextView.setText(Html.fromHtml(getString(R.string.styled_content)));\n}\n</code></pre></p> <p>Notez que le support du HTML reste limit\u00e9 (nombre de balises support\u00e9es, HTML mal form\u00e9, balises les unes dans les autres\u2026)</p>"},{"location":"blog/un-peu-de-style-dans-la-textview/#bonus","title":"Bonus","text":"<ul> <li> <p>Linkify permet de cr\u00e9er des TextViews contenant des liens cliquables de toute sorte. A ce sujet, je vous recommande l\u2019excellent article disponible sur la doc Android.</p> </li> <li> <p>Quels liens entre design Web et design Android ? Un article tout r\u00e9cent sur le blog Android aborde le sujet.</p> </li> </ul>"},{"location":"blog/un-peu-de-style-dans-la-textview/#comments","title":"Comments","text":""},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/","title":"Whenpiwai quitexcilys thenreturnnew blog","text":"<p>  [ | August 31, 2011]  </p> <p>Apr\u00e8s deux ans et demi de prestation de service et de fun au sein d\u2019Excilys, je m\u2019envole pour de nouvelles aventures !</p> <p>Tout ce que je peux officiellement vous dire pour le moment, c\u2019est que je vais bosser pour une startup qui fait de l\u2019Android. J\u2019ai h\u00e2te d\u2019y \u00eatre !</p> <p>Au sein d\u2019Excilys, j\u2019ai d\u00e9couvert le plaisir d\u2019\u00e9crire sur le Blog et le Labs Excilys, et j\u2019y ai laiss\u00e9 quelques 24 articles et 93 commentaires.</p> <p>Je vais donc continuer sur ce blog (n\u2019oubliez pas le Flux RSS) ;-)).</p> <p>J\u2019h\u00e9berge le blog sur wordpress.com, comme \u00e7a aucun souci de maintenance, et en prime ya m\u00eame une coloration syntaxique :</p> <pre><code>when(piwai.quit(excilys)).thenReturn(new Blog());\n</code></pre> <p>\u00c7a sera aussi l\u2019occasion de vous parler des projets open source qui me tiennent \u00e0 c\u0153ur : AndroidAnnotations, Rockslide, FunkyJFunctional, 2H4U ;-)</p> <p>On commence avec un peu de clean code : Les IDE et la r\u00e8gle des 80 / 120.</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#comments","title":"Comments","text":""},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#kevin-gaudin-kevingaudin","title":"K\u00e9vin Gaudin (@kevingaudin)","text":"<p>C\u2019est bien de changer ;) Bonne chance pour la suite, alors !</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#cedric-gatay-cedric_gatay","title":"Cedric Gatay (@Cedric_Gatay)","text":"<p>Bon courage pour la suite, l\u2019aventure startup est vraiment sympa !</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#francois-ostyn-ostynf","title":"Fran\u00e7ois OSTYN (@ostynf)","text":"<p>Pierre-Yves, bonne chance pour la suite des \u00e9v\u00e9nements !</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#yannick-grenzinger","title":"yannick grenzinger","text":"<p>Bravo monsieur ! On en reparle quand on se croise !  :D</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#khoa-nghiem","title":"Khoa Nghiem","text":"<p>Bonne chance pour la suite alors. Dommage que je n\u2019ai pas eu plus l\u2019occasion de te c\u00f4toyer</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#fred-faure","title":"Fred Faure","text":"<p>Congratulations jeune padawan devenu jedi !</p>"},{"location":"blog/whenpiwai-quitexcilys-thenreturnnew-blog/#thomas-bassetto-tbassetto","title":"Thomas Bassetto (@tbassetto)","text":"<p>Bonne chance pour la suite :D</p>"},{"location":"reveal.js/","title":"reveal.js","text":"<p>A framework for easily creating beautiful presentations using HTML. Check out the live demo.</p> <p>reveal.js comes with a broad range of features including nested slides, markdown contents, PDF export, speaker notes and a JavaScript API. It\u2019s best viewed in a browser with support for CSS 3D transforms but fallbacks are available to make sure your presentation can still be viewed elsewhere.</p>"},{"location":"reveal.js/#more-reading-in-the-wiki","title":"More reading in the Wiki:","text":"<ul> <li>Changelog: Up-to-date version history.</li> <li>Examples: Presentations created with reveal.js, add your own!</li> <li>Browser Support: Explanation of browser support and fallbacks.</li> </ul>"},{"location":"reveal.js/#rvlio","title":"rvl.io","text":"<p>Slides are written using HTML or markdown but there\u2019s also an online editor for those of you who prefer a more traditional user interface. Give it a try at www.rvl.io.</p>"},{"location":"reveal.js/#instructions","title":"Instructions","text":""},{"location":"reveal.js/#markup","title":"Markup","text":"<p>Markup heirarchy needs to be <code>&lt;div class=\"reveal\"&gt; &lt;div class=\"slides\"&gt; &lt;section&gt;</code> where the <code>&lt;section&gt;</code> represents one slide and can be repeated indefinitely. If you place multiple <code>&lt;section&gt;</code>\u2018s inside of another <code>&lt;section&gt;</code> they will be shown as vertical slides. The first of the vertical slides is the \u201croot\u201d of the others (at the top), and it will be included in the horizontal sequence. For example:</p> <pre><code>&lt;div class=\"reveal\"&gt;\n&lt;div class=\"slides\"&gt; \n&lt;section&gt;Single Horizontal Slide&lt;/section&gt;\n&lt;section&gt;\n&lt;section&gt;Vertical Slide 1&lt;/section&gt;\n&lt;section&gt;Vertical Slide 2&lt;/section&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"reveal.js/#markdown","title":"Markdown","text":"<p>It\u2019s possible to write your slides using Markdown. To enable Markdown, add the <code>data-markdown</code> attribute to your <code>&lt;section&gt;</code> elements and wrap the contents in a <code>&lt;script type=\"text/template\"&gt;</code> like the example below.</p> <p>This is based on data-markdown from Paul Irish which in turn uses showdown. This is sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks).</p> <pre><code>&lt;section data-markdown&gt;\n&lt;script type=\"text/template\"&gt;\n## Page title\nA paragraph with some text and a [link](http://hakim.se).\n&lt;/script&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"reveal.js/#configuration","title":"Configuration","text":"<p>At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below.</p> <pre><code>Reveal.initialize({\n// Display controls in the bottom right corner\ncontrols: true,\n// Display a presentation progress bar\nprogress: true,\n// Push each slide change to the browser history\nhistory: false,\n// Enable keyboard shortcuts for navigation\nkeyboard: true,\n// Enable the slide overview mode\noverview: true,\n// Vertical centering of slides\ncenter: true,\n// Loop the presentation\nloop: false,\n// Change the presentation direction to be RTL\nrtl: false,\n// Number of milliseconds between automatically proceeding to the \n// next slide, disabled when set to 0, this value can be overwritten\n// by using a data-autoslide attribute on your slides\nautoSlide: 0,\n// Enable slide navigation via mouse wheel\nmouseWheel: false,\n// Apply a 3D roll to links on hover\nrollingLinks: true,\n// Transition style\ntransition: 'default' // default/cube/page/concave/zoom/linear/none\n});\n</code></pre> <p>Note that the new default vertical centering option will break compatibility with slides that were using transitions with backgrounds (<code>cube</code> and <code>page</code>). To restore the previous behavior, set <code>center</code> to <code>false</code>.</p>"},{"location":"reveal.js/#dependencies","title":"Dependencies","text":"<p>Reveal.js doesn\u2019t rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example:</p> <pre><code>Reveal.initialize({\ndependencies: [\n// Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/\n{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },\n// Interpret Markdown in &lt;section&gt; elements\n{ src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n// Syntax highlight for &lt;code&gt; elements\n{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\n// Zoom in and out with Alt+click\n{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },\n// Speaker notes\n{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } },\n// Remote control your reveal.js presentation using a touch device\n{ src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }\n]\n});\n</code></pre> <p>You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src: Path to the script to load - async: [optional] Flags if the script should load after reveal.js has started, defaults to false - callback: [optional] Function to execute when the script has loaded - condition: [optional] Function which must return true for the script to be loaded</p>"},{"location":"reveal.js/#api","title":"API","text":"<p>The Reveal class provides a minimal JavaScript API for controlling navigation and reading state:</p> <pre><code>// Navigation\nReveal.slide( indexh, indexv, indexf );\nReveal.left();\nReveal.right();\nReveal.up();\nReveal.down();\nReveal.prev();\nReveal.next();\nReveal.prevFragment();\nReveal.nextFragment();\nReveal.toggleOverview();\n// Retrieves the previous and current slide elements\nReveal.getPreviousSlide();\nReveal.getCurrentSlide();\nReveal.getIndices(); // { h: 0, v: 0 } }\n</code></pre>"},{"location":"reveal.js/#states","title":"States","text":"<p>If you set <code>data-state=\"somestate\"</code> on a slide <code>&lt;section&gt;</code>, \u201csomestate\u201d will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.</p> <p>Furthermore you can also listen to these changes in state via JavaScript:</p> <pre><code>Reveal.addEventListener( 'somestate', function() {\n// TODO: Sprinkle magic\n}, false );\n</code></pre>"},{"location":"reveal.js/#ready-event","title":"Ready event","text":"<p>The \u2018ready\u2019 event is fired when reveal.js has loaded all (synchronous) dependencies and is ready to start navigating.</p> <pre><code>Reveal.addEventListener( 'ready', function( event ) {\n// event.currentSlide, event.indexh, event.indexv\n} );\n</code></pre>"},{"location":"reveal.js/#slide-change-event","title":"Slide change event","text":"<p>An \u2018slidechanged\u2019 event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes.</p> <p>Some libraries, like MathJax (see #226), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback.</p> <pre><code>Reveal.addEventListener( 'slidechanged', function( event ) {\n// event.previousSlide, event.currentSlide, event.indexh, event.indexv\n} );\n</code></pre>"},{"location":"reveal.js/#internal-links","title":"Internal links","text":"<p>It\u2019s easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute (<code>&lt;section id=\"some-slide\"&gt;</code>):</p> <pre><code>&lt;a href=\"#/2/2\"&gt;Link&lt;/a&gt;\n&lt;a href=\"#/some-slide\"&gt;Link&lt;/a&gt;\n</code></pre> <p>You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an <code>enabled</code> class when it\u2019s a valid navigation route based on the current slide.</p> <pre><code>&lt;a href=\"#\" class=\"navigate-left\"&gt;\n&lt;a href=\"#\" class=\"navigate-right\"&gt;\n&lt;a href=\"#\" class=\"navigate-up\"&gt;\n&lt;a href=\"#\" class=\"navigate-down\"&gt;\n&lt;a href=\"#\" class=\"navigate-prev\"&gt; &lt;!-- Previous vertical or horizontal slide --&gt;\n&lt;a href=\"#\" class=\"navigate-next\"&gt; &lt;!-- Next vertical or horizontal slide --&gt;\n</code></pre>"},{"location":"reveal.js/#fragments","title":"Fragments","text":"<p>Fragments are used to highlight individual elements on a slide. Every elmement with the class <code>fragment</code> will be stepped through before moving on to the next slide. Here\u2019s an example: http://lab.hakim.se/reveal-js/#/16</p> <p>The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment:</p> <pre><code>&lt;section&gt;\n&lt;p class=\"fragment grow\"&gt;grow&lt;/p&gt;\n&lt;p class=\"fragment shrink\"&gt;shrink&lt;/p&gt;\n&lt;p class=\"fragment roll-in\"&gt;roll-in&lt;/p&gt;\n&lt;p class=\"fragment fade-out\"&gt;fade-out&lt;/p&gt;\n&lt;p class=\"fragment highlight-red\"&gt;highlight-red&lt;/p&gt;\n&lt;p class=\"fragment highlight-green\"&gt;highlight-green&lt;/p&gt;\n&lt;p class=\"fragment highlight-blue\"&gt;highlight-blue&lt;/p&gt;\n&lt;/section&gt;\n</code></pre> <p>Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second.</p> <pre><code>&lt;section&gt;\n&lt;span class=\"fragment fade-out\"&gt;\n&lt;span class=\"fragment fade-out\"&gt;I'll fade in, then out&lt;/span&gt;\n&lt;/span&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"reveal.js/#fragment-events","title":"Fragment events","text":"<p>When a slide fragment is either shown or hidden reveal.js will dispatch an event.</p> <pre><code>Reveal.addEventListener( 'fragmentshown', function( event ) {\n// event.fragment = the fragment DOM element\n} );\nReveal.addEventListener( 'fragmenthidden', function( event ) {\n// event.fragment = the fragment DOM element\n} );\n</code></pre>"},{"location":"reveal.js/#overview-mode","title":"Overview mode","text":"<p>Press \u201cEsc\u201d key to toggle the overview mode on and off. While you\u2019re in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation.</p>"},{"location":"reveal.js/#fullscreen-mode","title":"Fullscreen mode","text":"<p>Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.</p>"},{"location":"reveal.js/#pdf-export","title":"PDF Export","text":"<p>Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome.  Here\u2019s an example of an exported presentation that\u2019s been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-13872948.</p> <ol> <li>Open your presentation with css/print/pdf.css included on the page. The default index HTML lets you add print-pdf anywhere in the query to include the stylesheet, for example: lab.hakim.se/reveal-js?print-pdf.</li> <li>Open the in-browser print dialog (CMD+P).</li> <li>Change the Destination setting to Save as PDF.</li> <li>Change the Layout to Landscape.</li> <li>Change the Margins to None.</li> <li>Click Save.</li> </ol> <p></p>"},{"location":"reveal.js/#speaker-notes","title":"Speaker Notes","text":"<p>reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven\u2019t written any notes. Append <code>?notes</code> to presentation URL or press the \u2018s\u2019 key on your keyboard to open the notes window.</p> <p>By default notes are written using standard HTML, see below, but you can add a <code>data-markdown</code> attribute to the <code>&lt;aside&gt;</code> to write them using Markdown.</p> <pre><code>&lt;section&gt;\n&lt;h2&gt;Some Slide&lt;/h2&gt;\n&lt;aside class=\"notes\"&gt;\n        Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).\n    &lt;/aside&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"reveal.js/#server-side-speaker-nodes","title":"Server Side Speaker Nodes","text":"<p>In some cases it can be desirable to run notes on a separate device from the one you\u2019re presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the requried scripts by adding the following dependencies:</p> <pre><code>{ src: '/socket.io/socket.io.js', async: true },\n{ src: 'plugin/notes-server/client.js', async: true }\n</code></pre> <p>Then:</p> <ol> <li>Install Node.js</li> <li>Run <code>npm install</code></li> <li>Run <code>node plugin/notes-server</code></li> </ol>"},{"location":"reveal.js/#development-environment","title":"Development Environment","text":"<p>reveal.js is built using the task-based command line build tool grunt.js (installation instructions). With Node.js and grunt.js installed, you need to start by running <code>npm install</code> in the reveal.js root. When the dependencies have been installed you should run <code>grunt watch</code> to start monitoring files for changes.</p> <p>If you want to customise reveal.js without running grunt.js you can alter the HTML to point to the uncompressed source files (css/reveal.css &amp; js/reveal.js).</p>"},{"location":"reveal.js/#folder-structure","title":"Folder Structure","text":"<ul> <li>css/ Core styles without which the project does not function</li> <li>js/ Like above but for JavaScript</li> <li>plugin/ Components that have been developed as extensions to reveal.js</li> <li>lib/ All other third party assets (JavaScript, CSS, fonts)</li> </ul>"},{"location":"reveal.js/#license","title":"License","text":"<p>MIT licensed</p> <p>Copyright (C) 2011-2012 Hakim El Hattab, http://hakim.se</p>"},{"location":"reveal.js/css/theme/","title":"Index","text":"<p>Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Find out how to install Sass here http://sass-lang.com/, once Sass is installed run the follwing command to start monitoring the source files for changes.</p> <pre><code>sass --watch css/theme/source/:css/theme --style expanded\n</code></pre>"}]}